{"version":3,"file":"tests.bundle.js","mappings":"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","sources":["webpack://p5.js-widget/./node_modules/assertion-error/index.js","webpack://p5.js-widget/./node_modules/chai/index.js","webpack://p5.js-widget/./node_modules/chai/lib/chai.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/assertion.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/config.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/core/assertions.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/interface/assert.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/interface/expect.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/interface/should.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/addMethod.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/addProperty.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/expectTypes.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/flag.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getActual.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getEnumerableProperties.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getMessage.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getOperator.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/getProperties.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/index.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/inspect.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/isNaN.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/objDisplay.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/proxify.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/test.js","webpack://p5.js-widget/./node_modules/chai/lib/chai/utils/transferFlags.js","webpack://p5.js-widget/./node_modules/check-error/index.js","webpack://p5.js-widget/./node_modules/deep-eql/index.js","webpack://p5.js-widget/./node_modules/esprima/esprima.js","webpack://p5.js-widget/./node_modules/get-func-name/index.js","webpack://p5.js-widget/./node_modules/pathval/index.js","webpack://p5.js-widget/./lib/falafel.ts","webpack://p5.js-widget/./lib/implicit-sketch.ts","webpack://p5.js-widget/./lib/loop-inserter.ts","webpack://p5.js-widget/./test/test-implicit-sketch.tsx","webpack://p5.js-widget/./test/test-loop-inserter.tsx","webpack://p5.js-widget/./node_modules/type-detect/type-detect.js","webpack://p5.js-widget/webpack/bootstrap","webpack://p5.js-widget/webpack/runtime/global","webpack://p5.js-widget/./test/main.tsx"],"sourcesContent":["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","/*\n  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        FnExprTokens,\n        Syntax,\n        PlaceHolders,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        hasLineTerminator,\n        lastIndex,\n        lastLineNumber,\n        lastLineStart,\n        startIndex,\n        startLineNumber,\n        startLineStart,\n        scanning,\n        length,\n        lookahead,\n        state,\n        extra,\n        isBindingElement,\n        isAssignmentTarget,\n        firstCoverInitializedNameError;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        RegularExpression: 9,\n        Template: 10\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n    TokenName[Token.RegularExpression] = 'RegularExpression';\n    TokenName[Token.Template] = 'Template';\n\n    // A function following one of those tokens is an expression.\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n                    'return', 'case', 'delete', 'throw', 'void',\n                    // assignment operators\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n                    '&=', '|=', '^=', ',',\n                    // binary/unary operators\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n                    '<=', '<', '>', '!=', '!=='];\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    PlaceHolders = {\n        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedEOS: 'Unexpected end of input',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp: 'Invalid regular expression: missing /',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        DefaultRestParameter: 'Unexpected token =',\n        ObjectPatternAsRestParameter: 'Unexpected token {',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DuplicateConstructor: 'A class may only have one constructor',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        MissingFromClause: 'Unexpected token',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        InvalidModuleSpecifier: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalExportDeclaration: 'Unexpected token',\n        DuplicateBinding: 'Duplicate binding %0'\n    };\n\n    // See also tools/generate-unicode-regex.js.\n    Regex = {\n        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/,\n\n        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= 0x30 && ch <= 0x39);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n    function octalToDecimal(ch) {\n        // \\0 is not octal escape sequence\n        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);\n\n        if (index < length && isOctalDigit(source[index])) {\n            octal = true;\n            code = code * 8 + '01234567'.indexOf(source[index++]);\n\n            // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n            if ('0123'.indexOf(ch) >= 0 &&\n                    index < length &&\n                    isOctalDigit(source[index])) {\n                code = code * 8 + '01234567'.indexOf(source[index++]);\n            }\n        }\n\n        return {\n            code: code,\n            octal: octal\n        };\n    }\n\n    // ECMA-262 11.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // ECMA-262 11.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // ECMA-262 11.6 Identifier Names and Identifiers\n\n    function fromCodePoint(cp) {\n        return (cp < 0x10000) ? String.fromCharCode(cp) :\n            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n    }\n\n    function isIdentifierStart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));\n    }\n\n    // ECMA-262 11.6.2.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n        case 'enum':\n        case 'export':\n        case 'import':\n        case 'super':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // ECMA-262 11.6.2.1 Keywords\n\n    function isKeyword(id) {\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\n                (id === 'try') || (id === 'let');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    // ECMA-262 11.4 Comments\n\n    function addComment(type, value, start, end, loc) {\n        var comment;\n\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        state.lastCommentStart = start;\n\n        comment = {\n            type: type,\n            value: value\n        };\n        if (extra.range) {\n            comment.range = [start, end];\n        }\n        if (extra.loc) {\n            comment.loc = loc;\n        }\n        extra.comments.push(comment);\n        if (extra.attachComment) {\n            extra.leadingComments.push(comment);\n            extra.trailingComments.push(comment);\n        }\n        if (extra.tokenize) {\n            comment.type = comment.type + 'Comment';\n            if (extra.delegate) {\n                comment = extra.delegate(comment);\n            }\n            extra.tokens.push(comment);\n        }\n    }\n\n    function skipSingleLineComment(offset) {\n        var start, loc, ch, comment;\n\n        start = index - offset;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart - offset\n            }\n        };\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            ++index;\n            if (isLineTerminator(ch)) {\n                hasLineTerminator = true;\n                if (extra.comments) {\n                    comment = source.slice(start + offset, index - 1);\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    addComment('Line', comment, start, index - 1, loc);\n                }\n                if (ch === 13 && source.charCodeAt(index) === 10) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                return;\n            }\n        }\n\n        if (extra.comments) {\n            comment = source.slice(start + offset, index);\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            addComment('Line', comment, start, index, loc);\n        }\n    }\n\n    function skipMultiLineComment() {\n        var start, loc, ch, comment;\n\n        if (extra.comments) {\n            start = index - 2;\n            loc = {\n                start: {\n                    line: lineNumber,\n                    column: index - lineStart - 2\n                }\n            };\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (isLineTerminator(ch)) {\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\n                    ++index;\n                }\n                hasLineTerminator = true;\n                ++lineNumber;\n                ++index;\n                lineStart = index;\n            } else if (ch === 0x2A) {\n                // Block comment ends with '*/'.\n                if (source.charCodeAt(index + 1) === 0x2F) {\n                    ++index;\n                    ++index;\n                    if (extra.comments) {\n                        comment = source.slice(start + 2, index - 2);\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        addComment('Block', comment, start, index, loc);\n                    }\n                    return;\n                }\n                ++index;\n            } else {\n                ++index;\n            }\n        }\n\n        // Ran off the end of the file - the whole thing is a comment\n        if (extra.comments) {\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            comment = source.slice(start + 2, index);\n            addComment('Block', comment, start, index, loc);\n        }\n        tolerateUnexpectedToken();\n    }\n\n    function skipComment() {\n        var ch, start;\n        hasLineTerminator = false;\n\n        start = (index === 0);\n        while (index < length) {\n            ch = source.charCodeAt(index);\n\n            if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                hasLineTerminator = true;\n                ++index;\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                start = true;\n            } else if (ch === 0x2F) { // U+002F is '/'\n                ch = source.charCodeAt(index + 1);\n                if (ch === 0x2F) {\n                    ++index;\n                    ++index;\n                    skipSingleLineComment(2);\n                    start = true;\n                } else if (ch === 0x2A) {  // U+002A is '*'\n                    ++index;\n                    ++index;\n                    skipMultiLineComment();\n                } else {\n                    break;\n                }\n            } else if (start && ch === 0x2D) { // U+002D is '-'\n                // U+003E is '>'\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\n                    // '-->' is a single-line comment\n                    index += 3;\n                    skipSingleLineComment(3);\n                } else {\n                    break;\n                }\n            } else if (ch === 0x3C) { // U+003C is '<'\n                if (source.slice(index + 1, index + 4) === '!--') {\n                    ++index; // `<`\n                    ++index; // `!`\n                    ++index; // `-`\n                    ++index; // `-`\n                    skipSingleLineComment(4);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanUnicodeCodePointEscape() {\n        var ch, code;\n\n        ch = source[index];\n        code = 0;\n\n        // At least, one hex digit is required.\n        if (ch === '}') {\n            throwUnexpectedToken();\n        }\n\n        while (index < length) {\n            ch = source[index++];\n            if (!isHexDigit(ch)) {\n                break;\n            }\n            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n        }\n\n        if (code > 0x10FFFF || ch !== '}') {\n            throwUnexpectedToken();\n        }\n\n        return fromCodePoint(code);\n    }\n\n    function codePointAt(i) {\n        var cp, first, second;\n\n        cp = source.charCodeAt(i);\n        if (cp >= 0xD800 && cp <= 0xDBFF) {\n            second = source.charCodeAt(i + 1);\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n                first = cp;\n                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n        }\n\n        return cp;\n    }\n\n    function getComplexIdentifier() {\n        var cp, ch, id;\n\n        cp = codePointAt(index);\n        id = fromCodePoint(cp);\n        index += id.length;\n\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        if (cp === 0x5C) {\n            if (source.charCodeAt(index) !== 0x75) {\n                throwUnexpectedToken();\n            }\n            ++index;\n            if (source[index] === '{') {\n                ++index;\n                ch = scanUnicodeCodePointEscape();\n            } else {\n                ch = scanHexEscape('u');\n                cp = ch.charCodeAt(0);\n                if (!ch || ch === '\\\\' || !isIdentifierStart(cp)) {\n                    throwUnexpectedToken();\n                }\n            }\n            id = ch;\n        }\n\n        while (index < length) {\n            cp = codePointAt(index);\n            if (!isIdentifierPart(cp)) {\n                break;\n            }\n            ch = fromCodePoint(cp);\n            id += ch;\n            index += ch.length;\n\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (cp === 0x5C) {\n                id = id.substr(0, id.length - 1);\n                if (source.charCodeAt(index) !== 0x75) {\n                    throwUnexpectedToken();\n                }\n                ++index;\n                if (source[index] === '{') {\n                    ++index;\n                    ch = scanUnicodeCodePointEscape();\n                } else {\n                    ch = scanHexEscape('u');\n                    cp = ch.charCodeAt(0);\n                    if (!ch || ch === '\\\\' || !isIdentifierPart(cp)) {\n                        throwUnexpectedToken();\n                    }\n                }\n                id += ch;\n            }\n        }\n\n        return id;\n    }\n\n    function getIdentifier() {\n        var start, ch;\n\n        start = index++;\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (ch === 0x5C) {\n                // Blackslash (U+005C) marks Unicode escape sequence.\n                index = start;\n                return getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n                // Need to handle surrogate pairs.\n                index = start;\n                return getComplexIdentifier();\n            }\n            if (isIdentifierPart(ch)) {\n                ++index;\n            } else {\n                break;\n            }\n        }\n\n        return source.slice(start, index);\n    }\n\n    function scanIdentifier() {\n        var start, id, type;\n\n        start = index;\n\n        // Backslash (U+005C) starts an escaped character.\n        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            type = Token.Identifier;\n        } else if (isKeyword(id)) {\n            type = Token.Keyword;\n        } else if (id === 'null') {\n            type = Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n            type = Token.BooleanLiteral;\n        } else {\n            type = Token.Identifier;\n        }\n\n        return {\n            type: type,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n\n    // ECMA-262 11.7 Punctuators\n\n    function scanPunctuator() {\n        var token, str;\n\n        token = {\n            type: Token.Punctuator,\n            value: '',\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: index,\n            end: index\n        };\n\n        // Check for most common single-character punctuators.\n        str = source[index];\n        switch (str) {\n\n        case '(':\n            if (extra.tokenize) {\n                extra.openParenToken = extra.tokenValues.length;\n            }\n            ++index;\n            break;\n\n        case '{':\n            if (extra.tokenize) {\n                extra.openCurlyToken = extra.tokenValues.length;\n            }\n            state.curlyStack.push('{');\n            ++index;\n            break;\n\n        case '.':\n            ++index;\n            if (source[index] === '.' && source[index + 1] === '.') {\n                // Spread operator: ...\n                index += 2;\n                str = '...';\n            }\n            break;\n\n        case '}':\n            ++index;\n            state.curlyStack.pop();\n            break;\n        case ')':\n        case ';':\n        case ',':\n        case '[':\n        case ']':\n        case ':':\n        case '?':\n        case '~':\n            ++index;\n            break;\n\n        default:\n            // 4-character punctuator.\n            str = source.substr(index, 4);\n            if (str === '>>>=') {\n                index += 4;\n            } else {\n\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n                if (str === '===' || str === '!==' || str === '>>>' ||\n                    str === '<<=' || str === '>>=') {\n                    index += 3;\n                } else {\n\n                    // 2-character punctuators.\n                    str = str.substr(0, 2);\n                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n                        str === '++' || str === '--' || str === '<<' || str === '>>' ||\n                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n                        str === '<=' || str === '>=' || str === '=>') {\n                        index += 2;\n                    } else {\n\n                        // 1-character punctuators.\n                        str = source[index];\n                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                            ++index;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (index === token.start) {\n            throwUnexpectedToken();\n        }\n\n        token.end = index;\n        token.value = str;\n        return token;\n    }\n\n    // ECMA-262 11.8.3 Numeric Literals\n\n    function scanHexLiteral(start) {\n        var number = '';\n\n        while (index < length) {\n            if (!isHexDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            throwUnexpectedToken();\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwUnexpectedToken();\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanBinaryLiteral(start) {\n        var ch, number;\n\n        number = '';\n\n        while (index < length) {\n            ch = source[index];\n            if (ch !== '0' && ch !== '1') {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            // only 0b or 0B\n            throwUnexpectedToken();\n        }\n\n        if (index < length) {\n            ch = source.charCodeAt(index);\n            /* istanbul ignore else */\n            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                throwUnexpectedToken();\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 2),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function scanOctalLiteral(prefix, start) {\n        var number, octal;\n\n        if (isOctalDigit(prefix)) {\n            octal = true;\n            number = '0' + source[index++];\n        } else {\n            octal = false;\n            ++index;\n            number = '';\n        }\n\n        while (index < length) {\n            if (!isOctalDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (!octal && number.length === 0) {\n            // only 0o or 0O\n            throwUnexpectedToken();\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n            throwUnexpectedToken();\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    function isImplicitOctalLiteral() {\n        var i, ch;\n\n        // Implicit octal, unless there is a non-octal digit.\n        // (Annex B.1.1 on Numeric Literals)\n        for (i = index + 1; i < length; ++i) {\n            ch = source[i];\n            if (ch === '8' || ch === '9') {\n                return false;\n            }\n            if (!isOctalDigit(ch)) {\n                return true;\n            }\n        }\n\n        return true;\n    }\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    ++index;\n                    return scanHexLiteral(start);\n                }\n                if (ch === 'b' || ch === 'B') {\n                    ++index;\n                    return scanBinaryLiteral(start);\n                }\n                if (ch === 'o' || ch === 'O') {\n                    return scanOctalLiteral(ch, start);\n                }\n\n                if (isOctalDigit(ch)) {\n                    if (isImplicitOctalLiteral()) {\n                        return scanOctalLiteral(ch, start);\n                    }\n                }\n            }\n\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n            if (isDecimalDigit(source.charCodeAt(index))) {\n                while (isDecimalDigit(source.charCodeAt(index))) {\n                    number += source[index++];\n                }\n            } else {\n                throwUnexpectedToken();\n            }\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwUnexpectedToken();\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // ECMA-262 11.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, unescaped, octToDec, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            str += scanUnicodeCodePointEscape();\n                        } else {\n                            unescaped = scanHexEscape(ch);\n                            if (!unescaped) {\n                                throw throwUnexpectedToken();\n                            }\n                            str += unescaped;\n                        }\n                        break;\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n                    case '8':\n                    case '9':\n                        str += ch;\n                        tolerateUnexpectedToken();\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            octToDec = octalToDecimal(ch);\n\n                            octal = octToDec.octal || octal;\n                            str += String.fromCharCode(octToDec.code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            index = start;\n            throwUnexpectedToken();\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: startLineNumber,\n            lineStart: startLineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // ECMA-262 11.8.6 Template Literal Lexical Components\n\n    function scanTemplate() {\n        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;\n\n        terminated = false;\n        tail = false;\n        start = index;\n        head = (source[index] === '`');\n        rawOffset = 2;\n\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n            if (ch === '`') {\n                rawOffset = 1;\n                tail = true;\n                terminated = true;\n                break;\n            } else if (ch === '$') {\n                if (source[index] === '{') {\n                    state.curlyStack.push('${');\n                    ++index;\n                    terminated = true;\n                    break;\n                }\n                cooked += ch;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'n':\n                        cooked += '\\n';\n                        break;\n                    case 'r':\n                        cooked += '\\r';\n                        break;\n                    case 't':\n                        cooked += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        if (source[index] === '{') {\n                            ++index;\n                            cooked += scanUnicodeCodePointEscape();\n                        } else {\n                            restore = index;\n                            unescaped = scanHexEscape(ch);\n                            if (unescaped) {\n                                cooked += unescaped;\n                            } else {\n                                index = restore;\n                                cooked += ch;\n                            }\n                        }\n                        break;\n                    case 'b':\n                        cooked += '\\b';\n                        break;\n                    case 'f':\n                        cooked += '\\f';\n                        break;\n                    case 'v':\n                        cooked += '\\v';\n                        break;\n\n                    default:\n                        if (ch === '0') {\n                            if (isDecimalDigit(source.charCodeAt(index))) {\n                                // Illegal: \\01 \\02 and so on\n                                throwError(Messages.TemplateOctalLiteral);\n                            }\n                            cooked += '\\0';\n                        } else if (isOctalDigit(ch)) {\n                            // Illegal: \\1 \\2\n                            throwError(Messages.TemplateOctalLiteral);\n                        } else {\n                            cooked += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                ++lineNumber;\n                if (ch === '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                lineStart = index;\n                cooked += '\\n';\n            } else {\n                cooked += ch;\n            }\n        }\n\n        if (!terminated) {\n            throwUnexpectedToken();\n        }\n\n        if (!head) {\n            state.curlyStack.pop();\n        }\n\n        return {\n            type: Token.Template,\n            value: {\n                cooked: cooked,\n                raw: source.slice(start + 1, index - rawOffset)\n            },\n            head: head,\n            tail: tail,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            start: start,\n            end: index\n        };\n    }\n\n    // ECMA-262 11.8.5 Regular Expression Literals\n\n    function testRegExp(pattern, flags) {\n        // The BMP character to use as a replacement for astral symbols when\n        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n        // approximation.\n        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n        // pattern that would not be detected by this substitution.\n        var astralSubstitute = '\\uFFFF',\n            tmp = pattern;\n\n        if (flags.indexOf('u') >= 0) {\n            tmp = tmp\n                // Replace every Unicode escape sequence with the equivalent\n                // BMP character or a constant ASCII code point in the case of\n                // astral symbols. (See the above note on `astralSubstitute`\n                // for more information.)\n                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n                    var codePoint = parseInt($1 || $2, 16);\n                    if (codePoint > 0x10FFFF) {\n                        throwUnexpectedToken(null, Messages.InvalidRegExp);\n                    }\n                    if (codePoint <= 0xFFFF) {\n                        return String.fromCharCode(codePoint);\n                    }\n                    return astralSubstitute;\n                })\n                // Replace each paired surrogate with a single ASCII symbol to\n                // avoid throwing on regular expressions that are only valid in\n                // combination with the \"u\" flag.\n                .replace(\n                    /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n                    astralSubstitute\n                );\n        }\n\n        // First, detect invalid regular expressions.\n        try {\n            RegExp(tmp);\n        } catch (e) {\n            throwUnexpectedToken(null, Messages.InvalidRegExp);\n        }\n\n        // Return a regular expression object for this pattern-flag pair, or\n        // `null` in case the current environment doesn't support the flags it\n        // uses.\n        try {\n            return new RegExp(pattern, flags);\n        } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n        }\n    }\n\n    function scanRegExpBody() {\n        var ch, str, classMarker, terminated, body;\n\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        classMarker = false;\n        terminated = false;\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch.charCodeAt(0))) {\n                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                throwUnexpectedToken(null, Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwUnexpectedToken(null, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        body = str.substr(1, str.length - 2);\n        return {\n            value: body,\n            literal: str\n        };\n    }\n\n    function scanRegExpFlags() {\n        var ch, str, flags, restore;\n\n        str = '';\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        for (str += '\\\\u'; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                    tolerateUnexpectedToken();\n                } else {\n                    str += '\\\\';\n                    tolerateUnexpectedToken();\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        return {\n            value: flags,\n            literal: str\n        };\n    }\n\n    function scanRegExp() {\n        var start, body, flags, value;\n        scanning = true;\n\n        lookahead = null;\n        skipComment();\n        start = index;\n\n        body = scanRegExpBody();\n        flags = scanRegExpFlags();\n        value = testRegExp(body.value, flags.value);\n        scanning = false;\n        if (extra.tokenize) {\n            return {\n                type: Token.RegularExpression,\n                value: value,\n                regex: {\n                    pattern: body.value,\n                    flags: flags.value\n                },\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: start,\n                end: index\n            };\n        }\n\n        return {\n            literal: body.literal + flags.literal,\n            value: value,\n            regex: {\n                pattern: body.value,\n                flags: flags.value\n            },\n            start: start,\n            end: index\n        };\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = scanRegExp();\n\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        /* istanbul ignore next */\n        if (!extra.tokenize) {\n            // Pop the previous token, which is likely '/' or '/='\n            if (extra.tokens.length > 0) {\n                token = extra.tokens[extra.tokens.length - 1];\n                if (token.range[0] === pos && token.type === 'Punctuator') {\n                    if (token.value === '/' || token.value === '/=') {\n                        extra.tokens.pop();\n                    }\n                }\n            }\n\n            extra.tokens.push({\n                type: 'RegularExpression',\n                value: regex.literal,\n                regex: regex.regex,\n                range: [pos, index],\n                loc: loc\n            });\n        }\n\n        return regex;\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    // Using the following algorithm:\n    // https://github.com/mozilla/sweet.js/wiki/design\n\n    function advanceSlash() {\n        var regex, previous, check;\n\n        function testKeyword(value) {\n            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');\n        }\n\n        previous = extra.tokenValues[extra.tokenValues.length - 1];\n        regex = (previous !== null);\n\n        switch (previous) {\n        case 'this':\n        case ']':\n            regex = false;\n            break;\n\n        case ')':\n            check = extra.tokenValues[extra.openParenToken - 1];\n            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\n            break;\n\n        case '}':\n            // Dividing a function by anything makes little sense,\n            // but we have to check for that.\n            regex = false;\n            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {\n                // Anonymous function, e.g. function(){} /42\n                check = extra.tokenValues[extra.openCurlyToken - 4];\n                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;\n            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {\n                // Named function, e.g. function f(){} /42/\n                check = extra.tokenValues[extra.openCurlyToken - 5];\n                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;\n            }\n        }\n\n        return regex ? collectRegex() : scanPunctuator();\n    }\n\n    function advance() {\n        var cp, token;\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                start: index,\n                end: index\n            };\n        }\n\n        cp = source.charCodeAt(index);\n\n        if (isIdentifierStart(cp)) {\n            token = scanIdentifier();\n            if (strict && isStrictModeReservedWord(token.value)) {\n                token.type = Token.Keyword;\n            }\n            return token;\n        }\n\n        // Very common: ( and ) and ;\n        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (cp === 0x27 || cp === 0x22) {\n            return scanStringLiteral();\n        }\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (cp === 0x2E) {\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\n                return scanNumericLiteral();\n            }\n            return scanPunctuator();\n        }\n\n        if (isDecimalDigit(cp)) {\n            return scanNumericLiteral();\n        }\n\n        // Slash (/) U+002F can also start a regex.\n        if (extra.tokenize && cp === 0x2F) {\n            return advanceSlash();\n        }\n\n        // Template literals start with ` (U+0060) for template head\n        // or } (U+007D) for template middle or template tail.\n        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {\n            return scanTemplate();\n        }\n\n        // Possible identifier start in a surrogate pair.\n        if (cp >= 0xD800 && cp < 0xDFFF) {\n            cp = codePointAt(index);\n            if (isIdentifierStart(cp)) {\n                return scanIdentifier();\n            }\n        }\n\n        return scanPunctuator();\n    }\n\n    function collectToken() {\n        var loc, token, value, entry;\n\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            value = source.slice(token.start, token.end);\n            entry = {\n                type: TokenName[token.type],\n                value: value,\n                range: [token.start, token.end],\n                loc: loc\n            };\n            if (token.regex) {\n                entry.regex = {\n                    pattern: token.regex.pattern,\n                    flags: token.regex.flags\n                };\n            }\n            if (extra.tokenValues) {\n                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);\n            }\n            if (extra.tokenize) {\n                if (!extra.range) {\n                    delete entry.range;\n                }\n                if (!extra.loc) {\n                    delete entry.loc;\n                }\n                if (extra.delegate) {\n                    entry = extra.delegate(entry);\n                }\n            }\n            extra.tokens.push(entry);\n        }\n\n        return token;\n    }\n\n    function lex() {\n        var token;\n        scanning = true;\n\n        lastIndex = index;\n        lastLineNumber = lineNumber;\n        lastLineStart = lineStart;\n\n        skipComment();\n\n        token = lookahead;\n\n        startIndex = index;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        scanning = false;\n        return token;\n    }\n\n    function peek() {\n        scanning = true;\n\n        skipComment();\n\n        lastIndex = index;\n        lastLineNumber = lineNumber;\n        lastLineStart = lineStart;\n\n        startIndex = index;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        scanning = false;\n    }\n\n    function Position() {\n        this.line = startLineNumber;\n        this.column = startIndex - startLineStart;\n    }\n\n    function SourceLocation() {\n        this.start = new Position();\n        this.end = null;\n    }\n\n    function WrappingSourceLocation(startToken) {\n        this.start = {\n            line: startToken.lineNumber,\n            column: startToken.start - startToken.lineStart\n        };\n        this.end = null;\n    }\n\n    function Node() {\n        if (extra.range) {\n            this.range = [startIndex, 0];\n        }\n        if (extra.loc) {\n            this.loc = new SourceLocation();\n        }\n    }\n\n    function WrappingNode(startToken) {\n        if (extra.range) {\n            this.range = [startToken.start, 0];\n        }\n        if (extra.loc) {\n            this.loc = new WrappingSourceLocation(startToken);\n        }\n    }\n\n    WrappingNode.prototype = Node.prototype = {\n\n        processComment: function () {\n            var lastChild,\n                innerComments,\n                leadingComments,\n                trailingComments,\n                bottomRight = extra.bottomRightStack,\n                i,\n                comment,\n                last = bottomRight[bottomRight.length - 1];\n\n            if (this.type === Syntax.Program) {\n                if (this.body.length > 0) {\n                    return;\n                }\n            }\n            /**\n             * patch innnerComments for properties empty block\n             * `function a() {/** comments **\\/}`\n             */\n\n            if (this.type === Syntax.BlockStatement && this.body.length === 0) {\n                innerComments = [];\n                for (i = extra.leadingComments.length - 1; i >= 0; --i) {\n                    comment = extra.leadingComments[i];\n                    if (this.range[1] >= comment.range[1]) {\n                        innerComments.unshift(comment);\n                        extra.leadingComments.splice(i, 1);\n                        extra.trailingComments.splice(i, 1);\n                    }\n                }\n                if (innerComments.length) {\n                    this.innerComments = innerComments;\n                    //bottomRight.push(this);\n                    return;\n                }\n            }\n\n            if (extra.trailingComments.length > 0) {\n                trailingComments = [];\n                for (i = extra.trailingComments.length - 1; i >= 0; --i) {\n                    comment = extra.trailingComments[i];\n                    if (comment.range[0] >= this.range[1]) {\n                        trailingComments.unshift(comment);\n                        extra.trailingComments.splice(i, 1);\n                    }\n                }\n                extra.trailingComments = [];\n            } else {\n                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {\n                    trailingComments = last.trailingComments;\n                    delete last.trailingComments;\n                }\n            }\n\n            // Eating the stack.\n            while (last && last.range[0] >= this.range[0]) {\n                lastChild = bottomRight.pop();\n                last = bottomRight[bottomRight.length - 1];\n            }\n\n            if (lastChild) {\n                if (lastChild.leadingComments) {\n                    leadingComments = [];\n                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {\n                        comment = lastChild.leadingComments[i];\n                        if (comment.range[1] <= this.range[0]) {\n                            leadingComments.unshift(comment);\n                            lastChild.leadingComments.splice(i, 1);\n                        }\n                    }\n\n                    if (!lastChild.leadingComments.length) {\n                        lastChild.leadingComments = undefined;\n                    }\n                }\n            } else if (extra.leadingComments.length > 0) {\n                leadingComments = [];\n                for (i = extra.leadingComments.length - 1; i >= 0; --i) {\n                    comment = extra.leadingComments[i];\n                    if (comment.range[1] <= this.range[0]) {\n                        leadingComments.unshift(comment);\n                        extra.leadingComments.splice(i, 1);\n                    }\n                }\n            }\n\n\n            if (leadingComments && leadingComments.length > 0) {\n                this.leadingComments = leadingComments;\n            }\n            if (trailingComments && trailingComments.length > 0) {\n                this.trailingComments = trailingComments;\n            }\n\n            bottomRight.push(this);\n        },\n\n        finish: function () {\n            if (extra.range) {\n                this.range[1] = lastIndex;\n            }\n            if (extra.loc) {\n                this.loc.end = {\n                    line: lastLineNumber,\n                    column: lastIndex - lastLineStart\n                };\n                if (extra.source) {\n                    this.loc.source = extra.source;\n                }\n            }\n\n            if (extra.attachComment) {\n                this.processComment();\n            }\n        },\n\n        finishArrayExpression: function (elements) {\n            this.type = Syntax.ArrayExpression;\n            this.elements = elements;\n            this.finish();\n            return this;\n        },\n\n        finishArrayPattern: function (elements) {\n            this.type = Syntax.ArrayPattern;\n            this.elements = elements;\n            this.finish();\n            return this;\n        },\n\n        finishArrowFunctionExpression: function (params, defaults, body, expression) {\n            this.type = Syntax.ArrowFunctionExpression;\n            this.id = null;\n            this.params = params;\n            this.defaults = defaults;\n            this.body = body;\n            this.generator = false;\n            this.expression = expression;\n            this.finish();\n            return this;\n        },\n\n        finishAssignmentExpression: function (operator, left, right) {\n            this.type = Syntax.AssignmentExpression;\n            this.operator = operator;\n            this.left = left;\n            this.right = right;\n            this.finish();\n            return this;\n        },\n\n        finishAssignmentPattern: function (left, right) {\n            this.type = Syntax.AssignmentPattern;\n            this.left = left;\n            this.right = right;\n            this.finish();\n            return this;\n        },\n\n        finishBinaryExpression: function (operator, left, right) {\n            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;\n            this.operator = operator;\n            this.left = left;\n            this.right = right;\n            this.finish();\n            return this;\n        },\n\n        finishBlockStatement: function (body) {\n            this.type = Syntax.BlockStatement;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishBreakStatement: function (label) {\n            this.type = Syntax.BreakStatement;\n            this.label = label;\n            this.finish();\n            return this;\n        },\n\n        finishCallExpression: function (callee, args) {\n            this.type = Syntax.CallExpression;\n            this.callee = callee;\n            this.arguments = args;\n            this.finish();\n            return this;\n        },\n\n        finishCatchClause: function (param, body) {\n            this.type = Syntax.CatchClause;\n            this.param = param;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishClassBody: function (body) {\n            this.type = Syntax.ClassBody;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishClassDeclaration: function (id, superClass, body) {\n            this.type = Syntax.ClassDeclaration;\n            this.id = id;\n            this.superClass = superClass;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishClassExpression: function (id, superClass, body) {\n            this.type = Syntax.ClassExpression;\n            this.id = id;\n            this.superClass = superClass;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishConditionalExpression: function (test, consequent, alternate) {\n            this.type = Syntax.ConditionalExpression;\n            this.test = test;\n            this.consequent = consequent;\n            this.alternate = alternate;\n            this.finish();\n            return this;\n        },\n\n        finishContinueStatement: function (label) {\n            this.type = Syntax.ContinueStatement;\n            this.label = label;\n            this.finish();\n            return this;\n        },\n\n        finishDebuggerStatement: function () {\n            this.type = Syntax.DebuggerStatement;\n            this.finish();\n            return this;\n        },\n\n        finishDoWhileStatement: function (body, test) {\n            this.type = Syntax.DoWhileStatement;\n            this.body = body;\n            this.test = test;\n            this.finish();\n            return this;\n        },\n\n        finishEmptyStatement: function () {\n            this.type = Syntax.EmptyStatement;\n            this.finish();\n            return this;\n        },\n\n        finishExpressionStatement: function (expression) {\n            this.type = Syntax.ExpressionStatement;\n            this.expression = expression;\n            this.finish();\n            return this;\n        },\n\n        finishForStatement: function (init, test, update, body) {\n            this.type = Syntax.ForStatement;\n            this.init = init;\n            this.test = test;\n            this.update = update;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishForOfStatement: function (left, right, body) {\n            this.type = Syntax.ForOfStatement;\n            this.left = left;\n            this.right = right;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishForInStatement: function (left, right, body) {\n            this.type = Syntax.ForInStatement;\n            this.left = left;\n            this.right = right;\n            this.body = body;\n            this.each = false;\n            this.finish();\n            return this;\n        },\n\n        finishFunctionDeclaration: function (id, params, defaults, body, generator) {\n            this.type = Syntax.FunctionDeclaration;\n            this.id = id;\n            this.params = params;\n            this.defaults = defaults;\n            this.body = body;\n            this.generator = generator;\n            this.expression = false;\n            this.finish();\n            return this;\n        },\n\n        finishFunctionExpression: function (id, params, defaults, body, generator) {\n            this.type = Syntax.FunctionExpression;\n            this.id = id;\n            this.params = params;\n            this.defaults = defaults;\n            this.body = body;\n            this.generator = generator;\n            this.expression = false;\n            this.finish();\n            return this;\n        },\n\n        finishIdentifier: function (name) {\n            this.type = Syntax.Identifier;\n            this.name = name;\n            this.finish();\n            return this;\n        },\n\n        finishIfStatement: function (test, consequent, alternate) {\n            this.type = Syntax.IfStatement;\n            this.test = test;\n            this.consequent = consequent;\n            this.alternate = alternate;\n            this.finish();\n            return this;\n        },\n\n        finishLabeledStatement: function (label, body) {\n            this.type = Syntax.LabeledStatement;\n            this.label = label;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishLiteral: function (token) {\n            this.type = Syntax.Literal;\n            this.value = token.value;\n            this.raw = source.slice(token.start, token.end);\n            if (token.regex) {\n                this.regex = token.regex;\n            }\n            this.finish();\n            return this;\n        },\n\n        finishMemberExpression: function (accessor, object, property) {\n            this.type = Syntax.MemberExpression;\n            this.computed = accessor === '[';\n            this.object = object;\n            this.property = property;\n            this.finish();\n            return this;\n        },\n\n        finishMetaProperty: function (meta, property) {\n            this.type = Syntax.MetaProperty;\n            this.meta = meta;\n            this.property = property;\n            this.finish();\n            return this;\n        },\n\n        finishNewExpression: function (callee, args) {\n            this.type = Syntax.NewExpression;\n            this.callee = callee;\n            this.arguments = args;\n            this.finish();\n            return this;\n        },\n\n        finishObjectExpression: function (properties) {\n            this.type = Syntax.ObjectExpression;\n            this.properties = properties;\n            this.finish();\n            return this;\n        },\n\n        finishObjectPattern: function (properties) {\n            this.type = Syntax.ObjectPattern;\n            this.properties = properties;\n            this.finish();\n            return this;\n        },\n\n        finishPostfixExpression: function (operator, argument) {\n            this.type = Syntax.UpdateExpression;\n            this.operator = operator;\n            this.argument = argument;\n            this.prefix = false;\n            this.finish();\n            return this;\n        },\n\n        finishProgram: function (body, sourceType) {\n            this.type = Syntax.Program;\n            this.body = body;\n            this.sourceType = sourceType;\n            this.finish();\n            return this;\n        },\n\n        finishProperty: function (kind, key, computed, value, method, shorthand) {\n            this.type = Syntax.Property;\n            this.key = key;\n            this.computed = computed;\n            this.value = value;\n            this.kind = kind;\n            this.method = method;\n            this.shorthand = shorthand;\n            this.finish();\n            return this;\n        },\n\n        finishRestElement: function (argument) {\n            this.type = Syntax.RestElement;\n            this.argument = argument;\n            this.finish();\n            return this;\n        },\n\n        finishReturnStatement: function (argument) {\n            this.type = Syntax.ReturnStatement;\n            this.argument = argument;\n            this.finish();\n            return this;\n        },\n\n        finishSequenceExpression: function (expressions) {\n            this.type = Syntax.SequenceExpression;\n            this.expressions = expressions;\n            this.finish();\n            return this;\n        },\n\n        finishSpreadElement: function (argument) {\n            this.type = Syntax.SpreadElement;\n            this.argument = argument;\n            this.finish();\n            return this;\n        },\n\n        finishSwitchCase: function (test, consequent) {\n            this.type = Syntax.SwitchCase;\n            this.test = test;\n            this.consequent = consequent;\n            this.finish();\n            return this;\n        },\n\n        finishSuper: function () {\n            this.type = Syntax.Super;\n            this.finish();\n            return this;\n        },\n\n        finishSwitchStatement: function (discriminant, cases) {\n            this.type = Syntax.SwitchStatement;\n            this.discriminant = discriminant;\n            this.cases = cases;\n            this.finish();\n            return this;\n        },\n\n        finishTaggedTemplateExpression: function (tag, quasi) {\n            this.type = Syntax.TaggedTemplateExpression;\n            this.tag = tag;\n            this.quasi = quasi;\n            this.finish();\n            return this;\n        },\n\n        finishTemplateElement: function (value, tail) {\n            this.type = Syntax.TemplateElement;\n            this.value = value;\n            this.tail = tail;\n            this.finish();\n            return this;\n        },\n\n        finishTemplateLiteral: function (quasis, expressions) {\n            this.type = Syntax.TemplateLiteral;\n            this.quasis = quasis;\n            this.expressions = expressions;\n            this.finish();\n            return this;\n        },\n\n        finishThisExpression: function () {\n            this.type = Syntax.ThisExpression;\n            this.finish();\n            return this;\n        },\n\n        finishThrowStatement: function (argument) {\n            this.type = Syntax.ThrowStatement;\n            this.argument = argument;\n            this.finish();\n            return this;\n        },\n\n        finishTryStatement: function (block, handler, finalizer) {\n            this.type = Syntax.TryStatement;\n            this.block = block;\n            this.guardedHandlers = [];\n            this.handlers = handler ? [handler] : [];\n            this.handler = handler;\n            this.finalizer = finalizer;\n            this.finish();\n            return this;\n        },\n\n        finishUnaryExpression: function (operator, argument) {\n            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;\n            this.operator = operator;\n            this.argument = argument;\n            this.prefix = true;\n            this.finish();\n            return this;\n        },\n\n        finishVariableDeclaration: function (declarations) {\n            this.type = Syntax.VariableDeclaration;\n            this.declarations = declarations;\n            this.kind = 'var';\n            this.finish();\n            return this;\n        },\n\n        finishLexicalDeclaration: function (declarations, kind) {\n            this.type = Syntax.VariableDeclaration;\n            this.declarations = declarations;\n            this.kind = kind;\n            this.finish();\n            return this;\n        },\n\n        finishVariableDeclarator: function (id, init) {\n            this.type = Syntax.VariableDeclarator;\n            this.id = id;\n            this.init = init;\n            this.finish();\n            return this;\n        },\n\n        finishWhileStatement: function (test, body) {\n            this.type = Syntax.WhileStatement;\n            this.test = test;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishWithStatement: function (object, body) {\n            this.type = Syntax.WithStatement;\n            this.object = object;\n            this.body = body;\n            this.finish();\n            return this;\n        },\n\n        finishExportSpecifier: function (local, exported) {\n            this.type = Syntax.ExportSpecifier;\n            this.exported = exported || local;\n            this.local = local;\n            this.finish();\n            return this;\n        },\n\n        finishImportDefaultSpecifier: function (local) {\n            this.type = Syntax.ImportDefaultSpecifier;\n            this.local = local;\n            this.finish();\n            return this;\n        },\n\n        finishImportNamespaceSpecifier: function (local) {\n            this.type = Syntax.ImportNamespaceSpecifier;\n            this.local = local;\n            this.finish();\n            return this;\n        },\n\n        finishExportNamedDeclaration: function (declaration, specifiers, src) {\n            this.type = Syntax.ExportNamedDeclaration;\n            this.declaration = declaration;\n            this.specifiers = specifiers;\n            this.source = src;\n            this.finish();\n            return this;\n        },\n\n        finishExportDefaultDeclaration: function (declaration) {\n            this.type = Syntax.ExportDefaultDeclaration;\n            this.declaration = declaration;\n            this.finish();\n            return this;\n        },\n\n        finishExportAllDeclaration: function (src) {\n            this.type = Syntax.ExportAllDeclaration;\n            this.source = src;\n            this.finish();\n            return this;\n        },\n\n        finishImportSpecifier: function (local, imported) {\n            this.type = Syntax.ImportSpecifier;\n            this.local = local || imported;\n            this.imported = imported;\n            this.finish();\n            return this;\n        },\n\n        finishImportDeclaration: function (specifiers, src) {\n            this.type = Syntax.ImportDeclaration;\n            this.specifiers = specifiers;\n            this.source = src;\n            this.finish();\n            return this;\n        },\n\n        finishYieldExpression: function (argument, delegate) {\n            this.type = Syntax.YieldExpression;\n            this.argument = argument;\n            this.delegate = delegate;\n            this.finish();\n            return this;\n        }\n    };\n\n\n    function recordError(error) {\n        var e, existing;\n\n        for (e = 0; e < extra.errors.length; e++) {\n            existing = extra.errors[e];\n            // Prevent duplicated error.\n            /* istanbul ignore next */\n            if (existing.index === error.index && existing.message === error.message) {\n                return;\n            }\n        }\n\n        extra.errors.push(error);\n    }\n\n    function constructError(msg, column) {\n        var error = new Error(msg);\n        try {\n            throw error;\n        } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n                error = Object.create(base);\n                Object.defineProperty(error, 'column', { value: column });\n            }\n        } finally {\n            return error;\n        }\n    }\n\n    function createError(line, pos, description) {\n        var msg, column, error;\n\n        msg = 'Line ' + line + ': ' + description;\n        column = pos - (scanning ? lineStart : lastLineStart) + 1;\n        error = constructError(msg, column);\n        error.lineNumber = line;\n        error.description = description;\n        error.index = pos;\n        return error;\n    }\n\n    // Throw an exception\n\n    function throwError(messageFormat) {\n        var args, msg;\n\n        args = Array.prototype.slice.call(arguments, 1);\n        msg = messageFormat.replace(/%(\\d)/g,\n            function (whole, idx) {\n                assert(idx < args.length, 'Message reference must be in range');\n                return args[idx];\n            }\n        );\n\n        throw createError(lastLineNumber, lastIndex, msg);\n    }\n\n    function tolerateError(messageFormat) {\n        var args, msg, error;\n\n        args = Array.prototype.slice.call(arguments, 1);\n        /* istanbul ignore next */\n        msg = messageFormat.replace(/%(\\d)/g,\n            function (whole, idx) {\n                assert(idx < args.length, 'Message reference must be in range');\n                return args[idx];\n            }\n        );\n\n        error = createError(lineNumber, lastIndex, msg);\n        if (extra.errors) {\n            recordError(error);\n        } else {\n            throw error;\n        }\n    }\n\n    // Throw an exception because of the token.\n\n    function unexpectedTokenError(token, message) {\n        var value, msg = message || Messages.UnexpectedToken;\n\n        if (token) {\n            if (!message) {\n                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :\n                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :\n                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :\n                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :\n                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :\n                    Messages.UnexpectedToken;\n\n                if (token.type === Token.Keyword) {\n                    if (isFutureReservedWord(token.value)) {\n                        msg = Messages.UnexpectedReserved;\n                    } else if (strict && isStrictModeReservedWord(token.value)) {\n                        msg = Messages.StrictReservedWord;\n                    }\n                }\n            }\n\n            value = (token.type === Token.Template) ? token.value.raw : token.value;\n        } else {\n            value = 'ILLEGAL';\n        }\n\n        msg = msg.replace('%0', value);\n\n        return (token && typeof token.lineNumber === 'number') ?\n            createError(token.lineNumber, token.start, msg) :\n            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);\n    }\n\n    function throwUnexpectedToken(token, message) {\n        throw unexpectedTokenError(token, message);\n    }\n\n    function tolerateUnexpectedToken(token, message) {\n        var error = unexpectedTokenError(token, message);\n        if (extra.errors) {\n            recordError(error);\n        } else {\n            throw error;\n        }\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpectedToken(token);\n        }\n    }\n\n    /**\n     * @name expectCommaSeparator\n     * @description Quietly expect a comma when in tolerant mode, otherwise delegates\n     * to <code>expect(value)</code>\n     * @since 2.0\n     */\n    function expectCommaSeparator() {\n        var token;\n\n        if (extra.errors) {\n            token = lookahead;\n            if (token.type === Token.Punctuator && token.value === ',') {\n                lex();\n            } else if (token.type === Token.Punctuator && token.value === ';') {\n                lex();\n                tolerateUnexpectedToken(token);\n            } else {\n                tolerateUnexpectedToken(token, Messages.UnexpectedToken);\n            }\n        } else {\n            expect(',');\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpectedToken(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\n    }\n\n    // Return true if the next token matches the specified contextual keyword\n    // (where an identifier is sometimes a keyword depending on the context)\n\n    function matchContextualKeyword(keyword) {\n        return lookahead.type === Token.Identifier && lookahead.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var op;\n\n        if (lookahead.type !== Token.Punctuator) {\n            return false;\n        }\n        op = lookahead.value;\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {\n            lex();\n            return;\n        }\n\n        if (hasLineTerminator) {\n            return;\n        }\n\n        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.\n        lastIndex = startIndex;\n        lastLineNumber = startLineNumber;\n        lastLineStart = startLineStart;\n\n        if (lookahead.type !== Token.EOF && !match('}')) {\n            throwUnexpectedToken(lookahead);\n        }\n    }\n\n    // Cover grammar support.\n    //\n    // When an assignment expression position starts with an left parenthesis, the determination of the type\n    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n    //\n    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n    // after the outermost pair is closed. They are:\n    //\n    //   1. AssignmentExpression\n    //   2. BindingElements\n    //   3. AssignmentTargets\n    //\n    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n    // binding element or assignment target.\n    //\n    // The three productions have the relationship:\n    //\n    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n    //\n    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n    //\n    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n    // the CoverInitializedName check is conducted.\n    //\n    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n    // pattern. The CoverInitializedName check is deferred.\n    function isolateCoverGrammar(parser) {\n        var oldIsBindingElement = isBindingElement,\n            oldIsAssignmentTarget = isAssignmentTarget,\n            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,\n            result;\n        isBindingElement = true;\n        isAssignmentTarget = true;\n        firstCoverInitializedNameError = null;\n        result = parser();\n        if (firstCoverInitializedNameError !== null) {\n            throwUnexpectedToken(firstCoverInitializedNameError);\n        }\n        isBindingElement = oldIsBindingElement;\n        isAssignmentTarget = oldIsAssignmentTarget;\n        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;\n        return result;\n    }\n\n    function inheritCoverGrammar(parser) {\n        var oldIsBindingElement = isBindingElement,\n            oldIsAssignmentTarget = isAssignmentTarget,\n            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,\n            result;\n        isBindingElement = true;\n        isAssignmentTarget = true;\n        firstCoverInitializedNameError = null;\n        result = parser();\n        isBindingElement = isBindingElement && oldIsBindingElement;\n        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;\n        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;\n        return result;\n    }\n\n    // ECMA-262 13.3.3 Destructuring Binding Patterns\n\n    function parseArrayPattern(params, kind) {\n        var node = new Node(), elements = [], rest, restNode;\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                if (match('...')) {\n                    restNode = new Node();\n                    lex();\n                    params.push(lookahead);\n                    rest = parseVariableIdentifier(kind);\n                    elements.push(restNode.finishRestElement(rest));\n                    break;\n                } else {\n                    elements.push(parsePatternWithDefault(params, kind));\n                }\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n\n        }\n\n        expect(']');\n\n        return node.finishArrayPattern(elements);\n    }\n\n    function parsePropertyPattern(params, kind) {\n        var node = new Node(), key, keyToken, computed = match('['), init;\n        if (lookahead.type === Token.Identifier) {\n            keyToken = lookahead;\n            key = parseVariableIdentifier();\n            if (match('=')) {\n                params.push(keyToken);\n                lex();\n                init = parseAssignmentExpression();\n\n                return node.finishProperty(\n                    'init', key, false,\n                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);\n            } else if (!match(':')) {\n                params.push(keyToken);\n                return node.finishProperty('init', key, false, key, false, true);\n            }\n        } else {\n            key = parseObjectPropertyKey();\n        }\n        expect(':');\n        init = parsePatternWithDefault(params, kind);\n        return node.finishProperty('init', key, computed, init, false, false);\n    }\n\n    function parseObjectPattern(params, kind) {\n        var node = new Node(), properties = [];\n\n        expect('{');\n\n        while (!match('}')) {\n            properties.push(parsePropertyPattern(params, kind));\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        lex();\n\n        return node.finishObjectPattern(properties);\n    }\n\n    function parsePattern(params, kind) {\n        if (match('[')) {\n            return parseArrayPattern(params, kind);\n        } else if (match('{')) {\n            return parseObjectPattern(params, kind);\n        } else if (matchKeyword('let')) {\n            if (kind === 'const' || kind === 'let') {\n                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);\n            }\n        }\n\n        params.push(lookahead);\n        return parseVariableIdentifier(kind);\n    }\n\n    function parsePatternWithDefault(params, kind) {\n        var startToken = lookahead, pattern, previousAllowYield, right;\n        pattern = parsePattern(params, kind);\n        if (match('=')) {\n            lex();\n            previousAllowYield = state.allowYield;\n            state.allowYield = true;\n            right = isolateCoverGrammar(parseAssignmentExpression);\n            state.allowYield = previousAllowYield;\n            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);\n        }\n        return pattern;\n    }\n\n    // ECMA-262 12.2.5 Array Initializer\n\n    function parseArrayInitializer() {\n        var elements = [], node = new Node(), restSpread;\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else if (match('...')) {\n                restSpread = new Node();\n                lex();\n                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));\n\n                if (!match(']')) {\n                    isAssignmentTarget = isBindingElement = false;\n                    expect(',');\n                }\n                elements.push(restSpread);\n            } else {\n                elements.push(inheritCoverGrammar(parseAssignmentExpression));\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        lex();\n\n        return node.finishArrayExpression(elements);\n    }\n\n    // ECMA-262 12.2.6 Object Initializer\n\n    function parsePropertyFunction(node, paramInfo, isGenerator) {\n        var previousStrict, body;\n\n        isAssignmentTarget = isBindingElement = false;\n\n        previousStrict = strict;\n        body = isolateCoverGrammar(parseFunctionSourceElements);\n\n        if (strict && paramInfo.firstRestricted) {\n            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);\n        }\n        if (strict && paramInfo.stricted) {\n            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);\n        }\n\n        strict = previousStrict;\n        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);\n    }\n\n    function parsePropertyMethodFunction() {\n        var params, method, node = new Node(),\n            previousAllowYield = state.allowYield;\n\n        state.allowYield = false;\n        params = parseParams();\n        state.allowYield = previousAllowYield;\n\n        state.allowYield = false;\n        method = parsePropertyFunction(node, params, false);\n        state.allowYield = previousAllowYield;\n\n        return method;\n    }\n\n    function parseObjectPropertyKey() {\n        var token, node = new Node(), expr;\n\n        token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        switch (token.type) {\n        case Token.StringLiteral:\n        case Token.NumericLiteral:\n            if (strict && token.octal) {\n                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);\n            }\n            return node.finishLiteral(token);\n        case Token.Identifier:\n        case Token.BooleanLiteral:\n        case Token.NullLiteral:\n        case Token.Keyword:\n            return node.finishIdentifier(token.value);\n        case Token.Punctuator:\n            if (token.value === '[') {\n                expr = isolateCoverGrammar(parseAssignmentExpression);\n                expect(']');\n                return expr;\n            }\n            break;\n        }\n        throwUnexpectedToken(token);\n    }\n\n    function lookaheadPropertyName() {\n        switch (lookahead.type) {\n        case Token.Identifier:\n        case Token.StringLiteral:\n        case Token.BooleanLiteral:\n        case Token.NullLiteral:\n        case Token.NumericLiteral:\n        case Token.Keyword:\n            return true;\n        case Token.Punctuator:\n            return lookahead.value === '[';\n        }\n        return false;\n    }\n\n    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,\n    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.\n    // This can only be determined after we consumed up to the left parentheses.\n    //\n    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller\n    // is responsible to visit other options.\n    function tryParseMethodDefinition(token, key, computed, node) {\n        var value, options, methodNode, params,\n            previousAllowYield = state.allowYield;\n\n        if (token.type === Token.Identifier) {\n            // check for `get` and `set`;\n\n            if (token.value === 'get' && lookaheadPropertyName()) {\n                computed = match('[');\n                key = parseObjectPropertyKey();\n                methodNode = new Node();\n                expect('(');\n                expect(')');\n\n                state.allowYield = false;\n                value = parsePropertyFunction(methodNode, {\n                    params: [],\n                    defaults: [],\n                    stricted: null,\n                    firstRestricted: null,\n                    message: null\n                }, false);\n                state.allowYield = previousAllowYield;\n\n                return node.finishProperty('get', key, computed, value, false, false);\n            } else if (token.value === 'set' && lookaheadPropertyName()) {\n                computed = match('[');\n                key = parseObjectPropertyKey();\n                methodNode = new Node();\n                expect('(');\n\n                options = {\n                    params: [],\n                    defaultCount: 0,\n                    defaults: [],\n                    firstRestricted: null,\n                    paramSet: {}\n                };\n                if (match(')')) {\n                    tolerateUnexpectedToken(lookahead);\n                } else {\n                    state.allowYield = false;\n                    parseParam(options);\n                    state.allowYield = previousAllowYield;\n                    if (options.defaultCount === 0) {\n                        options.defaults = [];\n                    }\n                }\n                expect(')');\n\n                state.allowYield = false;\n                value = parsePropertyFunction(methodNode, options, false);\n                state.allowYield = previousAllowYield;\n\n                return node.finishProperty('set', key, computed, value, false, false);\n            }\n        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {\n            computed = match('[');\n            key = parseObjectPropertyKey();\n            methodNode = new Node();\n\n            state.allowYield = true;\n            params = parseParams();\n            state.allowYield = previousAllowYield;\n\n            state.allowYield = false;\n            value = parsePropertyFunction(methodNode, params, true);\n            state.allowYield = previousAllowYield;\n\n            return node.finishProperty('init', key, computed, value, true, false);\n        }\n\n        if (key && match('(')) {\n            value = parsePropertyMethodFunction();\n            return node.finishProperty('init', key, computed, value, true, false);\n        }\n\n        // Not a MethodDefinition.\n        return null;\n    }\n\n    function parseObjectProperty(hasProto) {\n        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;\n\n        computed = match('[');\n        if (match('*')) {\n            lex();\n        } else {\n            key = parseObjectPropertyKey();\n        }\n        maybeMethod = tryParseMethodDefinition(token, key, computed, node);\n        if (maybeMethod) {\n            return maybeMethod;\n        }\n\n        if (!key) {\n            throwUnexpectedToken(lookahead);\n        }\n\n        // Check for duplicated __proto__\n        if (!computed) {\n            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||\n                (key.type === Syntax.Literal && key.value === '__proto__');\n            if (hasProto.value && proto) {\n                tolerateError(Messages.DuplicateProtoProperty);\n            }\n            hasProto.value |= proto;\n        }\n\n        if (match(':')) {\n            lex();\n            value = inheritCoverGrammar(parseAssignmentExpression);\n            return node.finishProperty('init', key, computed, value, false, false);\n        }\n\n        if (token.type === Token.Identifier) {\n            if (match('=')) {\n                firstCoverInitializedNameError = lookahead;\n                lex();\n                value = isolateCoverGrammar(parseAssignmentExpression);\n                return node.finishProperty('init', key, computed,\n                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);\n            }\n            return node.finishProperty('init', key, computed, key, false, true);\n        }\n\n        throwUnexpectedToken(lookahead);\n    }\n\n    function parseObjectInitializer() {\n        var properties = [], hasProto = {value: false}, node = new Node();\n\n        expect('{');\n\n        while (!match('}')) {\n            properties.push(parseObjectProperty(hasProto));\n\n            if (!match('}')) {\n                expectCommaSeparator();\n            }\n        }\n\n        expect('}');\n\n        return node.finishObjectExpression(properties);\n    }\n\n    function reinterpretExpressionAsPattern(expr) {\n        var i;\n        switch (expr.type) {\n        case Syntax.Identifier:\n        case Syntax.MemberExpression:\n        case Syntax.RestElement:\n        case Syntax.AssignmentPattern:\n            break;\n        case Syntax.SpreadElement:\n            expr.type = Syntax.RestElement;\n            reinterpretExpressionAsPattern(expr.argument);\n            break;\n        case Syntax.ArrayExpression:\n            expr.type = Syntax.ArrayPattern;\n            for (i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                    reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n            }\n            break;\n        case Syntax.ObjectExpression:\n            expr.type = Syntax.ObjectPattern;\n            for (i = 0; i < expr.properties.length; i++) {\n                reinterpretExpressionAsPattern(expr.properties[i].value);\n            }\n            break;\n        case Syntax.AssignmentExpression:\n            expr.type = Syntax.AssignmentPattern;\n            reinterpretExpressionAsPattern(expr.left);\n            break;\n        default:\n            // Allow other node type for tolerant parsing.\n            break;\n        }\n    }\n\n    // ECMA-262 12.2.9 Template Literals\n\n    function parseTemplateElement(option) {\n        var node, token;\n\n        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {\n            throwUnexpectedToken();\n        }\n\n        node = new Node();\n        token = lex();\n\n        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);\n    }\n\n    function parseTemplateLiteral() {\n        var quasi, quasis, expressions, node = new Node();\n\n        quasi = parseTemplateElement({ head: true });\n        quasis = [quasi];\n        expressions = [];\n\n        while (!quasi.tail) {\n            expressions.push(parseExpression());\n            quasi = parseTemplateElement({ head: false });\n            quasis.push(quasi);\n        }\n\n        return node.finishTemplateLiteral(quasis, expressions);\n    }\n\n    // ECMA-262 12.2.10 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr, expressions, startToken, i, params = [];\n\n        expect('(');\n\n        if (match(')')) {\n            lex();\n            if (!match('=>')) {\n                expect('=>');\n            }\n            return {\n                type: PlaceHolders.ArrowParameterPlaceHolder,\n                params: [],\n                rawParams: []\n            };\n        }\n\n        startToken = lookahead;\n        if (match('...')) {\n            expr = parseRestElement(params);\n            expect(')');\n            if (!match('=>')) {\n                expect('=>');\n            }\n            return {\n                type: PlaceHolders.ArrowParameterPlaceHolder,\n                params: [expr]\n            };\n        }\n\n        isBindingElement = true;\n        expr = inheritCoverGrammar(parseAssignmentExpression);\n\n        if (match(',')) {\n            isAssignmentTarget = false;\n            expressions = [expr];\n\n            while (startIndex < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n\n                if (match('...')) {\n                    if (!isBindingElement) {\n                        throwUnexpectedToken(lookahead);\n                    }\n                    expressions.push(parseRestElement(params));\n                    expect(')');\n                    if (!match('=>')) {\n                        expect('=>');\n                    }\n                    isBindingElement = false;\n                    for (i = 0; i < expressions.length; i++) {\n                        reinterpretExpressionAsPattern(expressions[i]);\n                    }\n                    return {\n                        type: PlaceHolders.ArrowParameterPlaceHolder,\n                        params: expressions\n                    };\n                }\n\n                expressions.push(inheritCoverGrammar(parseAssignmentExpression));\n            }\n\n            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);\n        }\n\n\n        expect(')');\n\n        if (match('=>')) {\n            if (expr.type === Syntax.Identifier && expr.name === 'yield') {\n                return {\n                    type: PlaceHolders.ArrowParameterPlaceHolder,\n                    params: [expr]\n                };\n            }\n\n            if (!isBindingElement) {\n                throwUnexpectedToken(lookahead);\n            }\n\n            if (expr.type === Syntax.SequenceExpression) {\n                for (i = 0; i < expr.expressions.length; i++) {\n                    reinterpretExpressionAsPattern(expr.expressions[i]);\n                }\n            } else {\n                reinterpretExpressionAsPattern(expr);\n            }\n\n            expr = {\n                type: PlaceHolders.ArrowParameterPlaceHolder,\n                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]\n            };\n        }\n        isBindingElement = false;\n        return expr;\n    }\n\n\n    // ECMA-262 12.2 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var type, token, expr, node;\n\n        if (match('(')) {\n            isBindingElement = false;\n            return inheritCoverGrammar(parseGroupExpression);\n        }\n\n        if (match('[')) {\n            return inheritCoverGrammar(parseArrayInitializer);\n        }\n\n        if (match('{')) {\n            return inheritCoverGrammar(parseObjectInitializer);\n        }\n\n        type = lookahead.type;\n        node = new Node();\n\n        if (type === Token.Identifier) {\n            if (state.sourceType === 'module' && lookahead.value === 'await') {\n                tolerateUnexpectedToken(lookahead);\n            }\n            expr = node.finishIdentifier(lex().value);\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            isAssignmentTarget = isBindingElement = false;\n            if (strict && lookahead.octal) {\n                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);\n            }\n            expr = node.finishLiteral(lex());\n        } else if (type === Token.Keyword) {\n            if (!strict && state.allowYield && matchKeyword('yield')) {\n                return parseNonComputedProperty();\n            }\n            if (!strict && matchKeyword('let')) {\n                return node.finishIdentifier(lex().value);\n            }\n            isAssignmentTarget = isBindingElement = false;\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n            if (matchKeyword('this')) {\n                lex();\n                return node.finishThisExpression();\n            }\n            if (matchKeyword('class')) {\n                return parseClassExpression();\n            }\n            throwUnexpectedToken(lex());\n        } else if (type === Token.BooleanLiteral) {\n            isAssignmentTarget = isBindingElement = false;\n            token = lex();\n            token.value = (token.value === 'true');\n            expr = node.finishLiteral(token);\n        } else if (type === Token.NullLiteral) {\n            isAssignmentTarget = isBindingElement = false;\n            token = lex();\n            token.value = null;\n            expr = node.finishLiteral(token);\n        } else if (match('/') || match('/=')) {\n            isAssignmentTarget = isBindingElement = false;\n            index = startIndex;\n\n            if (typeof extra.tokens !== 'undefined') {\n                token = collectRegex();\n            } else {\n                token = scanRegExp();\n            }\n            lex();\n            expr = node.finishLiteral(token);\n        } else if (type === Token.Template) {\n            expr = parseTemplateLiteral();\n        } else {\n            throwUnexpectedToken(lex());\n        }\n\n        return expr;\n    }\n\n    // ECMA-262 12.3 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [], expr;\n\n        expect('(');\n\n        if (!match(')')) {\n            while (startIndex < length) {\n                if (match('...')) {\n                    expr = new Node();\n                    lex();\n                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));\n                } else {\n                    expr = isolateCoverGrammar(parseAssignmentExpression);\n                }\n                args.push(expr);\n                if (match(')')) {\n                    break;\n                }\n                expectCommaSeparator();\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token, node = new Node();\n\n        token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpectedToken(token);\n        }\n\n        return node.finishIdentifier(token.value);\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = isolateCoverGrammar(parseExpression);\n\n        expect(']');\n\n        return expr;\n    }\n\n    // ECMA-262 12.3.3 The new Operator\n\n    function parseNewExpression() {\n        var callee, args, node = new Node();\n\n        expectKeyword('new');\n\n        if (match('.')) {\n            lex();\n            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {\n                if (state.inFunctionBody) {\n                    lex();\n                    return node.finishMetaProperty('new', 'target');\n                }\n            }\n            throwUnexpectedToken(lookahead);\n        }\n\n        callee = isolateCoverGrammar(parseLeftHandSideExpression);\n        args = match('(') ? parseArguments() : [];\n\n        isAssignmentTarget = isBindingElement = false;\n\n        return node.finishNewExpression(callee, args);\n    }\n\n    // ECMA-262 12.3.4 Function Calls\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;\n\n        startToken = lookahead;\n        state.allowIn = true;\n\n        if (matchKeyword('super') && state.inFunctionBody) {\n            expr = new Node();\n            lex();\n            expr = expr.finishSuper();\n            if (!match('(') && !match('.') && !match('[')) {\n                throwUnexpectedToken(lookahead);\n            }\n        } else {\n            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);\n        }\n\n        for (;;) {\n            if (match('.')) {\n                isBindingElement = false;\n                isAssignmentTarget = true;\n                property = parseNonComputedMember();\n                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);\n            } else if (match('(')) {\n                isBindingElement = false;\n                isAssignmentTarget = false;\n                args = parseArguments();\n                expr = new WrappingNode(startToken).finishCallExpression(expr, args);\n            } else if (match('[')) {\n                isBindingElement = false;\n                isAssignmentTarget = true;\n                property = parseComputedMember();\n                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);\n            } else if (lookahead.type === Token.Template && lookahead.head) {\n                quasi = parseTemplateLiteral();\n                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);\n            } else {\n                break;\n            }\n        }\n        state.allowIn = previousAllowIn;\n\n        return expr;\n    }\n\n    // ECMA-262 12.3 Left-Hand-Side Expressions\n\n    function parseLeftHandSideExpression() {\n        var quasi, expr, property, startToken;\n        assert(state.allowIn, 'callee of new expression always allow in keyword.');\n\n        startToken = lookahead;\n\n        if (matchKeyword('super') && state.inFunctionBody) {\n            expr = new Node();\n            lex();\n            expr = expr.finishSuper();\n            if (!match('[') && !match('.')) {\n                throwUnexpectedToken(lookahead);\n            }\n        } else {\n            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);\n        }\n\n        for (;;) {\n            if (match('[')) {\n                isBindingElement = false;\n                isAssignmentTarget = true;\n                property = parseComputedMember();\n                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);\n            } else if (match('.')) {\n                isBindingElement = false;\n                isAssignmentTarget = true;\n                property = parseNonComputedMember();\n                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);\n            } else if (lookahead.type === Token.Template && lookahead.head) {\n                quasi = parseTemplateLiteral();\n                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);\n            } else {\n                break;\n            }\n        }\n        return expr;\n    }\n\n    // ECMA-262 12.4 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr, token, startToken = lookahead;\n\n        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);\n\n        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {\n            if (match('++') || match('--')) {\n                // ECMA-262 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    tolerateError(Messages.StrictLHSPostfix);\n                }\n\n                if (!isAssignmentTarget) {\n                    tolerateError(Messages.InvalidLHSInAssignment);\n                }\n\n                isAssignmentTarget = isBindingElement = false;\n\n                token = lex();\n                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);\n            }\n        }\n\n        return expr;\n    }\n\n    // ECMA-262 12.5 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr, startToken;\n\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\n            expr = parsePostfixExpression();\n        } else if (match('++') || match('--')) {\n            startToken = lookahead;\n            token = lex();\n            expr = inheritCoverGrammar(parseUnaryExpression);\n            // ECMA-262 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                tolerateError(Messages.StrictLHSPrefix);\n            }\n\n            if (!isAssignmentTarget) {\n                tolerateError(Messages.InvalidLHSInAssignment);\n            }\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\n            isAssignmentTarget = isBindingElement = false;\n        } else if (match('+') || match('-') || match('~') || match('!')) {\n            startToken = lookahead;\n            token = lex();\n            expr = inheritCoverGrammar(parseUnaryExpression);\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\n            isAssignmentTarget = isBindingElement = false;\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            startToken = lookahead;\n            token = lex();\n            expr = inheritCoverGrammar(parseUnaryExpression);\n            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                tolerateError(Messages.StrictDelete);\n            }\n            isAssignmentTarget = isBindingElement = false;\n        } else {\n            expr = parsePostfixExpression();\n        }\n\n        return expr;\n    }\n\n    function binaryPrecedence(token, allowIn) {\n        var prec = 0;\n\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return 0;\n        }\n\n        switch (token.value) {\n        case '||':\n            prec = 1;\n            break;\n\n        case '&&':\n            prec = 2;\n            break;\n\n        case '|':\n            prec = 3;\n            break;\n\n        case '^':\n            prec = 4;\n            break;\n\n        case '&':\n            prec = 5;\n            break;\n\n        case '==':\n        case '!=':\n        case '===':\n        case '!==':\n            prec = 6;\n            break;\n\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n        case 'instanceof':\n            prec = 7;\n            break;\n\n        case 'in':\n            prec = allowIn ? 7 : 0;\n            break;\n\n        case '<<':\n        case '>>':\n        case '>>>':\n            prec = 8;\n            break;\n\n        case '+':\n        case '-':\n            prec = 9;\n            break;\n\n        case '*':\n        case '/':\n        case '%':\n            prec = 11;\n            break;\n\n        default:\n            break;\n        }\n\n        return prec;\n    }\n\n    // ECMA-262 12.6 Multiplicative Operators\n    // ECMA-262 12.7 Additive Operators\n    // ECMA-262 12.8 Bitwise Shift Operators\n    // ECMA-262 12.9 Relational Operators\n    // ECMA-262 12.10 Equality Operators\n    // ECMA-262 12.11 Binary Bitwise Operators\n    // ECMA-262 12.12 Binary Logical Operators\n\n    function parseBinaryExpression() {\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n        marker = lookahead;\n        left = inheritCoverGrammar(parseUnaryExpression);\n\n        token = lookahead;\n        prec = binaryPrecedence(token, state.allowIn);\n        if (prec === 0) {\n            return left;\n        }\n        isAssignmentTarget = isBindingElement = false;\n        token.prec = prec;\n        lex();\n\n        markers = [marker, lookahead];\n        right = isolateCoverGrammar(parseUnaryExpression);\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\n\n            // Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                markers.pop();\n                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);\n                stack.push(expr);\n            }\n\n            // Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(lookahead);\n            expr = isolateCoverGrammar(parseUnaryExpression);\n            stack.push(expr);\n        }\n\n        // Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        markers.pop();\n        while (i > 1) {\n            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n        }\n\n        return expr;\n    }\n\n\n    // ECMA-262 12.13 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent, alternate, startToken;\n\n        startToken = lookahead;\n\n        expr = inheritCoverGrammar(parseBinaryExpression);\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = isolateCoverGrammar(parseAssignmentExpression);\n            state.allowIn = previousAllowIn;\n            expect(':');\n            alternate = isolateCoverGrammar(parseAssignmentExpression);\n\n            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);\n            isAssignmentTarget = isBindingElement = false;\n        }\n\n        return expr;\n    }\n\n    // ECMA-262 14.2 Arrow Function Definitions\n\n    function parseConciseBody() {\n        if (match('{')) {\n            return parseFunctionSourceElements();\n        }\n        return isolateCoverGrammar(parseAssignmentExpression);\n    }\n\n    function checkPatternParam(options, param) {\n        var i;\n        switch (param.type) {\n        case Syntax.Identifier:\n            validateParam(options, param, param.name);\n            break;\n        case Syntax.RestElement:\n            checkPatternParam(options, param.argument);\n            break;\n        case Syntax.AssignmentPattern:\n            checkPatternParam(options, param.left);\n            break;\n        case Syntax.ArrayPattern:\n            for (i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                    checkPatternParam(options, param.elements[i]);\n                }\n            }\n            break;\n        case Syntax.YieldExpression:\n            break;\n        default:\n            assert(param.type === Syntax.ObjectPattern, 'Invalid type');\n            for (i = 0; i < param.properties.length; i++) {\n                checkPatternParam(options, param.properties[i].value);\n            }\n            break;\n        }\n    }\n    function reinterpretAsCoverFormalsList(expr) {\n        var i, len, param, params, defaults, defaultCount, options, token;\n\n        defaults = [];\n        defaultCount = 0;\n        params = [expr];\n\n        switch (expr.type) {\n        case Syntax.Identifier:\n            break;\n        case PlaceHolders.ArrowParameterPlaceHolder:\n            params = expr.params;\n            break;\n        default:\n            return null;\n        }\n\n        options = {\n            paramSet: {}\n        };\n\n        for (i = 0, len = params.length; i < len; i += 1) {\n            param = params[i];\n            switch (param.type) {\n            case Syntax.AssignmentPattern:\n                params[i] = param.left;\n                if (param.right.type === Syntax.YieldExpression) {\n                    if (param.right.argument) {\n                        throwUnexpectedToken(lookahead);\n                    }\n                    param.right.type = Syntax.Identifier;\n                    param.right.name = 'yield';\n                    delete param.right.argument;\n                    delete param.right.delegate;\n                }\n                defaults.push(param.right);\n                ++defaultCount;\n                checkPatternParam(options, param.left);\n                break;\n            default:\n                checkPatternParam(options, param);\n                params[i] = param;\n                defaults.push(null);\n                break;\n            }\n        }\n\n        if (strict || !state.allowYield) {\n            for (i = 0, len = params.length; i < len; i += 1) {\n                param = params[i];\n                if (param.type === Syntax.YieldExpression) {\n                    throwUnexpectedToken(lookahead);\n                }\n            }\n        }\n\n        if (options.message === Messages.StrictParamDupe) {\n            token = strict ? options.stricted : options.firstRestricted;\n            throwUnexpectedToken(token, options.message);\n        }\n\n        if (defaultCount === 0) {\n            defaults = [];\n        }\n\n        return {\n            params: params,\n            defaults: defaults,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n        };\n    }\n\n    function parseArrowFunctionExpression(options, node) {\n        var previousStrict, previousAllowYield, body;\n\n        if (hasLineTerminator) {\n            tolerateUnexpectedToken(lookahead);\n        }\n        expect('=>');\n\n        previousStrict = strict;\n        previousAllowYield = state.allowYield;\n        state.allowYield = true;\n\n        body = parseConciseBody();\n\n        if (strict && options.firstRestricted) {\n            throwUnexpectedToken(options.firstRestricted, options.message);\n        }\n        if (strict && options.stricted) {\n            tolerateUnexpectedToken(options.stricted, options.message);\n        }\n\n        strict = previousStrict;\n        state.allowYield = previousAllowYield;\n\n        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);\n    }\n\n    // ECMA-262 14.4 Yield expression\n\n    function parseYieldExpression() {\n        var argument, expr, delegate, previousAllowYield;\n\n        argument = null;\n        expr = new Node();\n        delegate = false;\n\n        expectKeyword('yield');\n\n        if (!hasLineTerminator) {\n            previousAllowYield = state.allowYield;\n            state.allowYield = false;\n            delegate = match('*');\n            if (delegate) {\n                lex();\n                argument = parseAssignmentExpression();\n            } else {\n                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {\n                    argument = parseAssignmentExpression();\n                }\n            }\n            state.allowYield = previousAllowYield;\n        }\n\n        return expr.finishYieldExpression(argument, delegate);\n    }\n\n    // ECMA-262 12.14 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr, right, list, startToken;\n\n        startToken = lookahead;\n        token = lookahead;\n\n        if (!state.allowYield && matchKeyword('yield')) {\n            return parseYieldExpression();\n        }\n\n        expr = parseConditionalExpression();\n\n        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {\n            isAssignmentTarget = isBindingElement = false;\n            list = reinterpretAsCoverFormalsList(expr);\n\n            if (list) {\n                firstCoverInitializedNameError = null;\n                return parseArrowFunctionExpression(list, new WrappingNode(startToken));\n            }\n\n            return expr;\n        }\n\n        if (matchAssign()) {\n            if (!isAssignmentTarget) {\n                tolerateError(Messages.InvalidLHSInAssignment);\n            }\n\n            // ECMA-262 12.1.1\n            if (strict && expr.type === Syntax.Identifier) {\n                if (isRestrictedWord(expr.name)) {\n                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);\n                }\n                if (isStrictModeReservedWord(expr.name)) {\n                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);\n                }\n            }\n\n            if (!match('=')) {\n                isAssignmentTarget = isBindingElement = false;\n            } else {\n                reinterpretExpressionAsPattern(expr);\n            }\n\n            token = lex();\n            right = isolateCoverGrammar(parseAssignmentExpression);\n            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);\n            firstCoverInitializedNameError = null;\n        }\n\n        return expr;\n    }\n\n    // ECMA-262 12.15 Comma Operator\n\n    function parseExpression() {\n        var expr, startToken = lookahead, expressions;\n\n        expr = isolateCoverGrammar(parseAssignmentExpression);\n\n        if (match(',')) {\n            expressions = [expr];\n\n            while (startIndex < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expressions.push(isolateCoverGrammar(parseAssignmentExpression));\n            }\n\n            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);\n        }\n\n        return expr;\n    }\n\n    // ECMA-262 13.2 Block\n\n    function parseStatementListItem() {\n        if (lookahead.type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'export':\n                if (state.sourceType !== 'module') {\n                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);\n                }\n                return parseExportDeclaration();\n            case 'import':\n                if (state.sourceType !== 'module') {\n                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);\n                }\n                return parseImportDeclaration();\n            case 'const':\n                return parseLexicalDeclaration({inFor: false});\n            case 'function':\n                return parseFunctionDeclaration(new Node());\n            case 'class':\n                return parseClassDeclaration();\n            }\n        }\n\n        if (matchKeyword('let') && isLexicalDeclaration()) {\n            return parseLexicalDeclaration({inFor: false});\n        }\n\n        return parseStatement();\n    }\n\n    function parseStatementList() {\n        var list = [];\n        while (startIndex < length) {\n            if (match('}')) {\n                break;\n            }\n            list.push(parseStatementListItem());\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block, node = new Node();\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return node.finishBlockStatement(block);\n    }\n\n    // ECMA-262 13.3.2 Variable Statement\n\n    function parseVariableIdentifier(kind) {\n        var token, node = new Node();\n\n        token = lex();\n\n        if (token.type === Token.Keyword && token.value === 'yield') {\n            if (strict) {\n                tolerateUnexpectedToken(token, Messages.StrictReservedWord);\n            } if (!state.allowYield) {\n                throwUnexpectedToken(token);\n            }\n        } else if (token.type !== Token.Identifier) {\n            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {\n                tolerateUnexpectedToken(token, Messages.StrictReservedWord);\n            } else {\n                if (strict || token.value !== 'let' || kind !== 'var') {\n                    throwUnexpectedToken(token);\n                }\n            }\n        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {\n            tolerateUnexpectedToken(token);\n        }\n\n        return node.finishIdentifier(token.value);\n    }\n\n    function parseVariableDeclaration(options) {\n        var init = null, id, node = new Node(), params = [];\n\n        id = parsePattern(params, 'var');\n\n        // ECMA-262 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            tolerateError(Messages.StrictVarName);\n        }\n\n        if (match('=')) {\n            lex();\n            init = isolateCoverGrammar(parseAssignmentExpression);\n        } else if (id.type !== Syntax.Identifier && !options.inFor) {\n            expect('=');\n        }\n\n        return node.finishVariableDeclarator(id, init);\n    }\n\n    function parseVariableDeclarationList(options) {\n        var opt, list;\n\n        opt = { inFor: options.inFor };\n        list = [parseVariableDeclaration(opt)];\n\n        while (match(',')) {\n            lex();\n            list.push(parseVariableDeclaration(opt));\n        }\n\n        return list;\n    }\n\n    function parseVariableStatement(node) {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList({ inFor: false });\n\n        consumeSemicolon();\n\n        return node.finishVariableDeclaration(declarations);\n    }\n\n    // ECMA-262 13.3.1 Let and Const Declarations\n\n    function parseLexicalBinding(kind, options) {\n        var init = null, id, node = new Node(), params = [];\n\n        id = parsePattern(params, kind);\n\n        // ECMA-262 12.2.1\n        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {\n            tolerateError(Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            if (!matchKeyword('in') && !matchContextualKeyword('of')) {\n                expect('=');\n                init = isolateCoverGrammar(parseAssignmentExpression);\n            }\n        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {\n            expect('=');\n            init = isolateCoverGrammar(parseAssignmentExpression);\n        }\n\n        return node.finishVariableDeclarator(id, init);\n    }\n\n    function parseBindingList(kind, options) {\n        var list = [parseLexicalBinding(kind, options)];\n\n        while (match(',')) {\n            lex();\n            list.push(parseLexicalBinding(kind, options));\n        }\n\n        return list;\n    }\n\n\n    function tokenizerState() {\n        return {\n            index: index,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            hasLineTerminator: hasLineTerminator,\n            lastIndex: lastIndex,\n            lastLineNumber: lastLineNumber,\n            lastLineStart: lastLineStart,\n            startIndex: startIndex,\n            startLineNumber: startLineNumber,\n            startLineStart: startLineStart,\n            lookahead: lookahead,\n            tokenCount: extra.tokens ? extra.tokens.length : 0\n        };\n    }\n\n    function resetTokenizerState(ts) {\n        index = ts.index;\n        lineNumber = ts.lineNumber;\n        lineStart = ts.lineStart;\n        hasLineTerminator = ts.hasLineTerminator;\n        lastIndex = ts.lastIndex;\n        lastLineNumber = ts.lastLineNumber;\n        lastLineStart = ts.lastLineStart;\n        startIndex = ts.startIndex;\n        startLineNumber = ts.startLineNumber;\n        startLineStart = ts.startLineStart;\n        lookahead = ts.lookahead;\n        if (extra.tokens) {\n            extra.tokens.splice(ts.tokenCount, extra.tokens.length);\n        }\n    }\n\n    function isLexicalDeclaration() {\n        var lexical, ts;\n\n        ts = tokenizerState();\n\n        lex();\n        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||\n            matchKeyword('let') || matchKeyword('yield');\n\n        resetTokenizerState(ts);\n\n        return lexical;\n    }\n\n    function parseLexicalDeclaration(options) {\n        var kind, declarations, node = new Node();\n\n        kind = lex().value;\n        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\n        declarations = parseBindingList(kind, options);\n\n        consumeSemicolon();\n\n        return node.finishLexicalDeclaration(declarations, kind);\n    }\n\n    function parseRestElement(params) {\n        var param, node = new Node();\n\n        lex();\n\n        if (match('{')) {\n            throwError(Messages.ObjectPatternAsRestParameter);\n        }\n\n        params.push(lookahead);\n\n        param = parseVariableIdentifier();\n\n        if (match('=')) {\n            throwError(Messages.DefaultRestParameter);\n        }\n\n        if (!match(')')) {\n            throwError(Messages.ParameterAfterRestParameter);\n        }\n\n        return node.finishRestElement(param);\n    }\n\n    // ECMA-262 13.4 Empty Statement\n\n    function parseEmptyStatement(node) {\n        expect(';');\n        return node.finishEmptyStatement();\n    }\n\n    // ECMA-262 12.4 Expression Statement\n\n    function parseExpressionStatement(node) {\n        var expr = parseExpression();\n        consumeSemicolon();\n        return node.finishExpressionStatement(expr);\n    }\n\n    // ECMA-262 13.6 If statement\n\n    function parseIfStatement(node) {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return node.finishIfStatement(test, consequent, alternate);\n    }\n\n    // ECMA-262 13.7 Iteration Statements\n\n    function parseDoWhileStatement(node) {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return node.finishDoWhileStatement(body, test);\n    }\n\n    function parseWhileStatement(node) {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return node.finishWhileStatement(test, body);\n    }\n\n    function parseForStatement(node) {\n        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,\n            body, oldInIteration, previousAllowIn = state.allowIn;\n\n        init = test = update = null;\n        forIn = true;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var')) {\n                init = new Node();\n                lex();\n\n                state.allowIn = false;\n                declarations = parseVariableDeclarationList({ inFor: true });\n                state.allowIn = previousAllowIn;\n\n                if (declarations.length === 1 && matchKeyword('in')) {\n                    init = init.finishVariableDeclaration(declarations);\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {\n                    init = init.finishVariableDeclaration(declarations);\n                    lex();\n                    left = init;\n                    right = parseAssignmentExpression();\n                    init = null;\n                    forIn = false;\n                } else {\n                    init = init.finishVariableDeclaration(declarations);\n                    expect(';');\n                }\n            } else if (matchKeyword('const') || matchKeyword('let')) {\n                init = new Node();\n                kind = lex().value;\n\n                if (!strict && lookahead.value === 'in') {\n                    init = init.finishIdentifier(kind);\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else {\n                    state.allowIn = false;\n                    declarations = parseBindingList(kind, {inFor: true});\n                    state.allowIn = previousAllowIn;\n\n                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {\n                        init = init.finishLexicalDeclaration(declarations, kind);\n                        lex();\n                        left = init;\n                        right = parseExpression();\n                        init = null;\n                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {\n                        init = init.finishLexicalDeclaration(declarations, kind);\n                        lex();\n                        left = init;\n                        right = parseAssignmentExpression();\n                        init = null;\n                        forIn = false;\n                    } else {\n                        consumeSemicolon();\n                        init = init.finishLexicalDeclaration(declarations, kind);\n                    }\n                }\n            } else {\n                initStartToken = lookahead;\n                state.allowIn = false;\n                init = inheritCoverGrammar(parseAssignmentExpression);\n                state.allowIn = previousAllowIn;\n\n                if (matchKeyword('in')) {\n                    if (!isAssignmentTarget) {\n                        tolerateError(Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    reinterpretExpressionAsPattern(init);\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                } else if (matchContextualKeyword('of')) {\n                    if (!isAssignmentTarget) {\n                        tolerateError(Messages.InvalidLHSInForLoop);\n                    }\n\n                    lex();\n                    reinterpretExpressionAsPattern(init);\n                    left = init;\n                    right = parseAssignmentExpression();\n                    init = null;\n                    forIn = false;\n                } else {\n                    if (match(',')) {\n                        initSeq = [init];\n                        while (match(',')) {\n                            lex();\n                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));\n                        }\n                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);\n                    }\n                    expect(';');\n                }\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = isolateCoverGrammar(parseStatement);\n\n        state.inIteration = oldInIteration;\n\n        return (typeof left === 'undefined') ?\n                node.finishForStatement(init, test, update, body) :\n                forIn ? node.finishForInStatement(left, right, body) :\n                    node.finishForOfStatement(left, right, body);\n    }\n\n    // ECMA-262 13.8 The continue statement\n\n    function parseContinueStatement(node) {\n        var label = null, key;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source.charCodeAt(startIndex) === 0x3B) {\n            lex();\n\n            if (!state.inIteration) {\n                throwError(Messages.IllegalContinue);\n            }\n\n            return node.finishContinueStatement(null);\n        }\n\n        if (hasLineTerminator) {\n            if (!state.inIteration) {\n                throwError(Messages.IllegalContinue);\n            }\n\n            return node.finishContinueStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError(Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError(Messages.IllegalContinue);\n        }\n\n        return node.finishContinueStatement(label);\n    }\n\n    // ECMA-262 13.9 The break statement\n\n    function parseBreakStatement(node) {\n        var label = null, key;\n\n        expectKeyword('break');\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(lastIndex) === 0x3B) {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError(Messages.IllegalBreak);\n            }\n\n            return node.finishBreakStatement(null);\n        }\n\n        if (hasLineTerminator) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError(Messages.IllegalBreak);\n            }\n        } else if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError(Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError(Messages.IllegalBreak);\n        }\n\n        return node.finishBreakStatement(label);\n    }\n\n    // ECMA-262 13.10 The return statement\n\n    function parseReturnStatement(node) {\n        var argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            tolerateError(Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source.charCodeAt(lastIndex) === 0x20) {\n            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return node.finishReturnStatement(argument);\n            }\n        }\n\n        if (hasLineTerminator) {\n            // HACK\n            return node.finishReturnStatement(null);\n        }\n\n        if (!match(';')) {\n            if (!match('}') && lookahead.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return node.finishReturnStatement(argument);\n    }\n\n    // ECMA-262 13.11 The with statement\n\n    function parseWithStatement(node) {\n        var object, body;\n\n        if (strict) {\n            tolerateError(Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return node.finishWithStatement(object, body);\n    }\n\n    // ECMA-262 13.12 The switch statement\n\n    function parseSwitchCase() {\n        var test, consequent = [], statement, node = new Node();\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (startIndex < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatementListItem();\n            consequent.push(statement);\n        }\n\n        return node.finishSwitchCase(test, consequent);\n    }\n\n    function parseSwitchStatement(node) {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return node.finishSwitchStatement(discriminant, cases);\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (startIndex < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError(Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return node.finishSwitchStatement(discriminant, cases);\n    }\n\n    // ECMA-262 13.14 The throw statement\n\n    function parseThrowStatement(node) {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (hasLineTerminator) {\n            throwError(Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return node.finishThrowStatement(argument);\n    }\n\n    // ECMA-262 13.15 The try statement\n\n    function parseCatchClause() {\n        var param, params = [], paramMap = {}, key, i, body, node = new Node();\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpectedToken(lookahead);\n        }\n\n        param = parsePattern(params);\n        for (i = 0; i < params.length; i++) {\n            key = '$' + params[i].value;\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n                tolerateError(Messages.DuplicateBinding, params[i].value);\n            }\n            paramMap[key] = true;\n        }\n\n        // ECMA-262 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            tolerateError(Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n        body = parseBlock();\n        return node.finishCatchClause(param, body);\n    }\n\n    function parseTryStatement(node) {\n        var block, handler = null, finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handler = parseCatchClause();\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (!handler && !finalizer) {\n            throwError(Messages.NoCatchOrFinally);\n        }\n\n        return node.finishTryStatement(block, handler, finalizer);\n    }\n\n    // ECMA-262 13.16 The debugger statement\n\n    function parseDebuggerStatement(node) {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return node.finishDebuggerStatement();\n    }\n\n    // 13 Statements\n\n    function parseStatement() {\n        var type = lookahead.type,\n            expr,\n            labeledBody,\n            key,\n            node;\n\n        if (type === Token.EOF) {\n            throwUnexpectedToken(lookahead);\n        }\n\n        if (type === Token.Punctuator && lookahead.value === '{') {\n            return parseBlock();\n        }\n        isAssignmentTarget = isBindingElement = true;\n        node = new Node();\n\n        if (type === Token.Punctuator) {\n            switch (lookahead.value) {\n            case ';':\n                return parseEmptyStatement(node);\n            case '(':\n                return parseExpressionStatement(node);\n            default:\n                break;\n            }\n        } else if (type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'break':\n                return parseBreakStatement(node);\n            case 'continue':\n                return parseContinueStatement(node);\n            case 'debugger':\n                return parseDebuggerStatement(node);\n            case 'do':\n                return parseDoWhileStatement(node);\n            case 'for':\n                return parseForStatement(node);\n            case 'function':\n                return parseFunctionDeclaration(node);\n            case 'if':\n                return parseIfStatement(node);\n            case 'return':\n                return parseReturnStatement(node);\n            case 'switch':\n                return parseSwitchStatement(node);\n            case 'throw':\n                return parseThrowStatement(node);\n            case 'try':\n                return parseTryStatement(node);\n            case 'var':\n                return parseVariableStatement(node);\n            case 'while':\n                return parseWhileStatement(node);\n            case 'with':\n                return parseWithStatement(node);\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // ECMA-262 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            key = '$' + expr.name;\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError(Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[key] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[key];\n            return node.finishLabeledStatement(expr, labeledBody);\n        }\n\n        consumeSemicolon();\n\n        return node.finishExpressionStatement(expr);\n    }\n\n    // ECMA-262 14.1 Function Definition\n\n    function parseFunctionSourceElements() {\n        var statement, body = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,\n            node = new Node();\n\n        expect('{');\n\n        while (startIndex < length) {\n            if (lookahead.type !== Token.StringLiteral) {\n                break;\n            }\n            token = lookahead;\n\n            statement = parseStatementListItem();\n            body.push(statement);\n            if (statement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (startIndex < length) {\n            if (match('}')) {\n                break;\n            }\n            body.push(parseStatementListItem());\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return node.finishBlockStatement(body);\n    }\n\n    function validateParam(options, param, name) {\n        var key = '$' + name;\n        if (strict) {\n            if (isRestrictedWord(name)) {\n                options.stricted = param;\n                options.message = Messages.StrictParamName;\n            }\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n                options.stricted = param;\n                options.message = Messages.StrictParamDupe;\n            }\n        } else if (!options.firstRestricted) {\n            if (isRestrictedWord(name)) {\n                options.firstRestricted = param;\n                options.message = Messages.StrictParamName;\n            } else if (isStrictModeReservedWord(name)) {\n                options.firstRestricted = param;\n                options.message = Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n                options.stricted = param;\n                options.message = Messages.StrictParamDupe;\n            }\n        }\n        options.paramSet[key] = true;\n    }\n\n    function parseParam(options) {\n        var token, param, params = [], i, def;\n\n        token = lookahead;\n        if (token.value === '...') {\n            param = parseRestElement(params);\n            validateParam(options, param.argument, param.argument.name);\n            options.params.push(param);\n            options.defaults.push(null);\n            return false;\n        }\n\n        param = parsePatternWithDefault(params);\n        for (i = 0; i < params.length; i++) {\n            validateParam(options, params[i], params[i].value);\n        }\n\n        if (param.type === Syntax.AssignmentPattern) {\n            def = param.right;\n            param = param.left;\n            ++options.defaultCount;\n        }\n\n        options.params.push(param);\n        options.defaults.push(def);\n\n        return !match(')');\n    }\n\n    function parseParams(firstRestricted) {\n        var options;\n\n        options = {\n            params: [],\n            defaultCount: 0,\n            defaults: [],\n            firstRestricted: firstRestricted\n        };\n\n        expect('(');\n\n        if (!match(')')) {\n            options.paramSet = {};\n            while (startIndex < length) {\n                if (!parseParam(options)) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        if (options.defaultCount === 0) {\n            options.defaults = [];\n        }\n\n        return {\n            params: options.params,\n            defaults: options.defaults,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n        };\n    }\n\n    function parseFunctionDeclaration(node, identifierIsOptional) {\n        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,\n            isGenerator, previousAllowYield;\n\n        previousAllowYield = state.allowYield;\n\n        expectKeyword('function');\n\n        isGenerator = match('*');\n        if (isGenerator) {\n            lex();\n        }\n\n        if (!identifierIsOptional || !match('(')) {\n            token = lookahead;\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        state.allowYield = !isGenerator;\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        defaults = tmp.defaults;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwUnexpectedToken(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            tolerateUnexpectedToken(stricted, message);\n        }\n\n        strict = previousStrict;\n        state.allowYield = previousAllowYield;\n\n        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, tmp,\n            params = [], defaults = [], body, previousStrict, node = new Node(),\n            isGenerator, previousAllowYield;\n\n        previousAllowYield = state.allowYield;\n\n        expectKeyword('function');\n\n        isGenerator = match('*');\n        if (isGenerator) {\n            lex();\n        }\n\n        state.allowYield = !isGenerator;\n        if (!match('(')) {\n            token = lookahead;\n            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        defaults = tmp.defaults;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwUnexpectedToken(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            tolerateUnexpectedToken(stricted, message);\n        }\n        strict = previousStrict;\n        state.allowYield = previousAllowYield;\n\n        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);\n    }\n\n    // ECMA-262 14.5 Class Definitions\n\n    function parseClassBody() {\n        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;\n\n        classBody = new Node();\n\n        expect('{');\n        body = [];\n        while (!match('}')) {\n            if (match(';')) {\n                lex();\n            } else {\n                method = new Node();\n                token = lookahead;\n                isStatic = false;\n                computed = match('[');\n                if (match('*')) {\n                    lex();\n                } else {\n                    key = parseObjectPropertyKey();\n                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {\n                        token = lookahead;\n                        isStatic = true;\n                        computed = match('[');\n                        if (match('*')) {\n                            lex();\n                        } else {\n                            key = parseObjectPropertyKey();\n                        }\n                    }\n                }\n                method = tryParseMethodDefinition(token, key, computed, method);\n                if (method) {\n                    method['static'] = isStatic; // jscs:ignore requireDotNotation\n                    if (method.kind === 'init') {\n                        method.kind = 'method';\n                    }\n                    if (!isStatic) {\n                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {\n                            if (method.kind !== 'method' || !method.method || method.value.generator) {\n                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);\n                            }\n                            if (hasConstructor) {\n                                throwUnexpectedToken(token, Messages.DuplicateConstructor);\n                            } else {\n                                hasConstructor = true;\n                            }\n                            method.kind = 'constructor';\n                        }\n                    } else {\n                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {\n                            throwUnexpectedToken(token, Messages.StaticPrototype);\n                        }\n                    }\n                    method.type = Syntax.MethodDefinition;\n                    delete method.method;\n                    delete method.shorthand;\n                    body.push(method);\n                } else {\n                    throwUnexpectedToken(lookahead);\n                }\n            }\n        }\n        lex();\n        return classBody.finishClassBody(body);\n    }\n\n    function parseClassDeclaration(identifierIsOptional) {\n        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;\n        strict = true;\n\n        expectKeyword('class');\n\n        if (!identifierIsOptional || lookahead.type === Token.Identifier) {\n            id = parseVariableIdentifier();\n        }\n\n        if (matchKeyword('extends')) {\n            lex();\n            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);\n        }\n        classBody = parseClassBody();\n        strict = previousStrict;\n\n        return classNode.finishClassDeclaration(id, superClass, classBody);\n    }\n\n    function parseClassExpression() {\n        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;\n        strict = true;\n\n        expectKeyword('class');\n\n        if (lookahead.type === Token.Identifier) {\n            id = parseVariableIdentifier();\n        }\n\n        if (matchKeyword('extends')) {\n            lex();\n            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);\n        }\n        classBody = parseClassBody();\n        strict = previousStrict;\n\n        return classNode.finishClassExpression(id, superClass, classBody);\n    }\n\n    // ECMA-262 15.2 Modules\n\n    function parseModuleSpecifier() {\n        var node = new Node();\n\n        if (lookahead.type !== Token.StringLiteral) {\n            throwError(Messages.InvalidModuleSpecifier);\n        }\n        return node.finishLiteral(lex());\n    }\n\n    // ECMA-262 15.2.3 Exports\n\n    function parseExportSpecifier() {\n        var exported, local, node = new Node(), def;\n        if (matchKeyword('default')) {\n            // export {default} from 'something';\n            def = new Node();\n            lex();\n            local = def.finishIdentifier('default');\n        } else {\n            local = parseVariableIdentifier();\n        }\n        if (matchContextualKeyword('as')) {\n            lex();\n            exported = parseNonComputedProperty();\n        }\n        return node.finishExportSpecifier(local, exported);\n    }\n\n    function parseExportNamedDeclaration(node) {\n        var declaration = null,\n            isExportFromIdentifier,\n            src = null, specifiers = [];\n\n        // non-default export\n        if (lookahead.type === Token.Keyword) {\n            // covers:\n            // export var f = 1;\n            switch (lookahead.value) {\n                case 'let':\n                case 'const':\n                    declaration = parseLexicalDeclaration({inFor: false});\n                    return node.finishExportNamedDeclaration(declaration, specifiers, null);\n                case 'var':\n                case 'class':\n                case 'function':\n                    declaration = parseStatementListItem();\n                    return node.finishExportNamedDeclaration(declaration, specifiers, null);\n            }\n        }\n\n        expect('{');\n        while (!match('}')) {\n            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');\n            specifiers.push(parseExportSpecifier());\n            if (!match('}')) {\n                expect(',');\n                if (match('}')) {\n                    break;\n                }\n            }\n        }\n        expect('}');\n\n        if (matchContextualKeyword('from')) {\n            // covering:\n            // export {default} from 'foo';\n            // export {foo} from 'foo';\n            lex();\n            src = parseModuleSpecifier();\n            consumeSemicolon();\n        } else if (isExportFromIdentifier) {\n            // covering:\n            // export {default}; // missing fromClause\n            throwError(lookahead.value ?\n                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\n        } else {\n            // cover\n            // export {foo};\n            consumeSemicolon();\n        }\n        return node.finishExportNamedDeclaration(declaration, specifiers, src);\n    }\n\n    function parseExportDefaultDeclaration(node) {\n        var declaration = null,\n            expression = null;\n\n        // covers:\n        // export default ...\n        expectKeyword('default');\n\n        if (matchKeyword('function')) {\n            // covers:\n            // export default function foo () {}\n            // export default function () {}\n            declaration = parseFunctionDeclaration(new Node(), true);\n            return node.finishExportDefaultDeclaration(declaration);\n        }\n        if (matchKeyword('class')) {\n            declaration = parseClassDeclaration(true);\n            return node.finishExportDefaultDeclaration(declaration);\n        }\n\n        if (matchContextualKeyword('from')) {\n            throwError(Messages.UnexpectedToken, lookahead.value);\n        }\n\n        // covers:\n        // export default {};\n        // export default [];\n        // export default (1 + 2);\n        if (match('{')) {\n            expression = parseObjectInitializer();\n        } else if (match('[')) {\n            expression = parseArrayInitializer();\n        } else {\n            expression = parseAssignmentExpression();\n        }\n        consumeSemicolon();\n        return node.finishExportDefaultDeclaration(expression);\n    }\n\n    function parseExportAllDeclaration(node) {\n        var src;\n\n        // covers:\n        // export * from 'foo';\n        expect('*');\n        if (!matchContextualKeyword('from')) {\n            throwError(lookahead.value ?\n                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\n        }\n        lex();\n        src = parseModuleSpecifier();\n        consumeSemicolon();\n\n        return node.finishExportAllDeclaration(src);\n    }\n\n    function parseExportDeclaration() {\n        var node = new Node();\n        if (state.inFunctionBody) {\n            throwError(Messages.IllegalExportDeclaration);\n        }\n\n        expectKeyword('export');\n\n        if (matchKeyword('default')) {\n            return parseExportDefaultDeclaration(node);\n        }\n        if (match('*')) {\n            return parseExportAllDeclaration(node);\n        }\n        return parseExportNamedDeclaration(node);\n    }\n\n    // ECMA-262 15.2.2 Imports\n\n    function parseImportSpecifier() {\n        // import {<foo as bar>} ...;\n        var local, imported, node = new Node();\n\n        imported = parseNonComputedProperty();\n        if (matchContextualKeyword('as')) {\n            lex();\n            local = parseVariableIdentifier();\n        }\n\n        return node.finishImportSpecifier(local, imported);\n    }\n\n    function parseNamedImports() {\n        var specifiers = [];\n        // {foo, bar as bas}\n        expect('{');\n        while (!match('}')) {\n            specifiers.push(parseImportSpecifier());\n            if (!match('}')) {\n                expect(',');\n                if (match('}')) {\n                    break;\n                }\n            }\n        }\n        expect('}');\n        return specifiers;\n    }\n\n    function parseImportDefaultSpecifier() {\n        // import <foo> ...;\n        var local, node = new Node();\n\n        local = parseNonComputedProperty();\n\n        return node.finishImportDefaultSpecifier(local);\n    }\n\n    function parseImportNamespaceSpecifier() {\n        // import <* as foo> ...;\n        var local, node = new Node();\n\n        expect('*');\n        if (!matchContextualKeyword('as')) {\n            throwError(Messages.NoAsAfterImportNamespace);\n        }\n        lex();\n        local = parseNonComputedProperty();\n\n        return node.finishImportNamespaceSpecifier(local);\n    }\n\n    function parseImportDeclaration() {\n        var specifiers = [], src, node = new Node();\n\n        if (state.inFunctionBody) {\n            throwError(Messages.IllegalImportDeclaration);\n        }\n\n        expectKeyword('import');\n\n        if (lookahead.type === Token.StringLiteral) {\n            // import 'foo';\n            src = parseModuleSpecifier();\n        } else {\n\n            if (match('{')) {\n                // import {bar}\n                specifiers = specifiers.concat(parseNamedImports());\n            } else if (match('*')) {\n                // import * as foo\n                specifiers.push(parseImportNamespaceSpecifier());\n            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {\n                // import foo\n                specifiers.push(parseImportDefaultSpecifier());\n                if (match(',')) {\n                    lex();\n                    if (match('*')) {\n                        // import foo, * as foo\n                        specifiers.push(parseImportNamespaceSpecifier());\n                    } else if (match('{')) {\n                        // import foo, {bar}\n                        specifiers = specifiers.concat(parseNamedImports());\n                    } else {\n                        throwUnexpectedToken(lookahead);\n                    }\n                }\n            } else {\n                throwUnexpectedToken(lex());\n            }\n\n            if (!matchContextualKeyword('from')) {\n                throwError(lookahead.value ?\n                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);\n            }\n            lex();\n            src = parseModuleSpecifier();\n        }\n\n        consumeSemicolon();\n        return node.finishImportDeclaration(specifiers, src);\n    }\n\n    // ECMA-262 15.1 Scripts\n\n    function parseScriptBody() {\n        var statement, body = [], token, directive, firstRestricted;\n\n        while (startIndex < length) {\n            token = lookahead;\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            statement = parseStatementListItem();\n            body.push(statement);\n            if (statement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.start + 1, token.end - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (startIndex < length) {\n            statement = parseStatementListItem();\n            /* istanbul ignore if */\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            body.push(statement);\n        }\n        return body;\n    }\n\n    function parseProgram() {\n        var body, node;\n\n        peek();\n        node = new Node();\n\n        body = parseScriptBody();\n        return node.finishProgram(body, state.sourceType);\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (entry.regex) {\n                token.regex = {\n                    pattern: entry.regex.pattern,\n                    flags: entry.regex.flags\n                };\n            }\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function tokenize(code, options, delegate) {\n        var toString,\n            tokens;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        startIndex = index;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            allowYield: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1,\n            curlyStack: []\n        };\n\n        extra = {};\n\n        // Options matching.\n        options = options || {};\n\n        // Of course we collect tokens here.\n        options.tokens = true;\n        extra.tokens = [];\n        extra.tokenValues = [];\n        extra.tokenize = true;\n        extra.delegate = delegate;\n\n        // The following two fields are necessary to compute the Regex tokens.\n        extra.openParenToken = -1;\n        extra.openCurlyToken = -1;\n\n        extra.range = (typeof options.range === 'boolean') && options.range;\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\n\n        if (typeof options.comment === 'boolean' && options.comment) {\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\n            extra.errors = [];\n        }\n\n        try {\n            peek();\n            if (lookahead.type === Token.EOF) {\n                return extra.tokens;\n            }\n\n            lex();\n            while (lookahead.type !== Token.EOF) {\n                try {\n                    lex();\n                } catch (lexError) {\n                    if (extra.errors) {\n                        recordError(lexError);\n                        // We have to break on the first error\n                        // to avoid infinite loops.\n                        break;\n                    } else {\n                        throw lexError;\n                    }\n                }\n            }\n\n            tokens = extra.tokens;\n            if (typeof extra.errors !== 'undefined') {\n                tokens.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n        return tokens;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        startIndex = index;\n        startLineNumber = lineNumber;\n        startLineStart = lineStart;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            allowYield: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1,\n            curlyStack: [],\n            sourceType: 'script'\n        };\n        strict = false;\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\n\n            if (extra.loc && options.source !== null && options.source !== undefined) {\n                extra.source = toString(options.source);\n            }\n\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n            if (extra.attachComment) {\n                extra.range = true;\n                extra.comments = [];\n                extra.bottomRightStack = [];\n                extra.trailingComments = [];\n                extra.leadingComments = [];\n            }\n            if (options.sourceType === 'module') {\n                // very restrictive condition for now\n                state.sourceType = options.sourceType;\n                strict = true;\n            }\n        }\n\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with *.json manifests.\n    exports.version = '2.7.3';\n\n    exports.tokenize = tokenize;\n\n    exports.parse = parse;\n\n    // Deep copy.\n    /* istanbul ignore next */\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","// This is an older version of falafel that used esprima instead of acorn.\n// Taken from https://github.com/toolness/slowmo-js.\n\nimport esprima = require('esprima');\n\nlet parse = esprima.parse;\n\nexport default function (src, opts, fn) {\n    if (typeof opts === 'function') {\n        fn = opts;\n        opts = {};\n    }\n    if (typeof src === 'object') {\n        opts = src;\n        src = opts.source;\n        delete opts.source;\n    }\n    src = src || opts.source;\n    opts.range = true;\n    if (typeof src !== 'string') src = String(src);\n    \n    var ast = parse(src, opts);\n    \n    var result = {\n        chunks : src.split(''),\n        toString : function () { return result.chunks.join('') },\n        inspect : function () { return result.toString() }\n    };\n    var index = 0;\n    \n    (function walk (node, parent) {\n        insertHelpers(node, parent, result.chunks);\n        \n        Object.keys(node).forEach(function (key) {\n            if (key === 'parent') return;\n            \n            var child = node[key];\n            if (Array.isArray(child)) {\n                child.forEach(function (c) {\n                    if (c && typeof c.type === 'string') {\n                        walk(c, node);\n                    }\n                });\n            }\n            else if (child && typeof child.type === 'string') {\n                insertHelpers(child, node, result.chunks);\n                walk(child, node);\n            }\n        });\n        fn(node);\n    })(ast, undefined);\n    \n    return result;\n};\n \nfunction insertHelpers (node, parent, chunks) {\n    if (!node.range) return;\n    \n    node.parent = parent;\n    \n    node.source = function () {\n        return chunks.slice(\n            node.range[0], node.range[1]\n        ).join('');\n    };\n    \n    if (node.update && typeof node.update === 'object') {\n        var prev = node.update;\n        Object.keys(prev).forEach(function (key) {\n            update[key] = prev[key];\n        });\n        node.update = update;\n    }\n    else {\n        node.update = update;\n    }\n    \n    function update (s) {\n        chunks[node.range[0]] = s;\n        for (var i = node.range[0] + 1; i < node.range[1]; i++) {\n            chunks[i] = '';\n        }\n    };\n}\n","import esprima = require(\"esprima\");\n\nexport default function makeImplicitSketch(code: string) {\n  let ast: ESTree.Program;\n\n  try {\n    ast = esprima.parse(code);\n  } catch (e) {\n    return code;\n  }\n\n  for (let i = 0; i < ast.body.length; i++) {\n    let statement = ast.body[i];\n    if (statement.type === esprima.Syntax.FunctionDeclaration) {\n      let funcDecl = statement as ESTree.FunctionDeclaration;\n\n      if (funcDecl.id.name === \"setup\" || funcDecl.id.name === \"draw\") {\n        return code;\n      }\n    }\n\n    if (statement.type === esprima.Syntax.VariableDeclaration) {\n      let varDecl = statement as ESTree.VariableDeclaration;\n\n      for (let j = 0; j < varDecl.declarations.length; j++) {\n        // This is a bit odd because our ESTree typings indicate\n        // that a VariableDeclarator.id is a Pattern, but it\n        // seems to actually be an Identifier, so we'll forcibly\n        // typecast it as such.\n        let id = varDecl.declarations[j].id as ESTree.Identifier;\n\n        if (id.name === \"setup\" || id.name === \"draw\") {\n          return code;\n        }\n      }\n    }\n  }\n\n  return \"function setup() { \" + code + \" }\";\n}\n","// Taken from https://github.com/toolness/slowmo-js.\n\nfunction defaultInserter(name) {\n  return function(node) {\n    return name + \"();\"\n  }\n}\n\nexport default function LoopInserter(fn) {\n  if (typeof(fn) == \"string\")\n    fn = defaultInserter(fn);\n\n  return function(node) {\n    if (node.type == 'WhileStatement' ||\n        node.type == 'ForStatement' ||\n        node.type == 'DoWhileStatement') {\n      node.body.update('{ ' + fn(node) + node.body.source() + ' }');\n      return true;\n    }\n    return false;\n  };\n};\n","/// <reference path=\"../typings/mocha.d.ts\" />\n\nimport chai = require(\"chai\"); let expect = chai.expect;\n\nimport makeImplicitSketch from \"../lib/implicit-sketch\";\n\nfunction ensureUnchanged(code: string) {\n  expect(makeImplicitSketch(code)).to.eql(code);\n}\n\ndescribe(\"makeImplicitSketch()\", () => {\n  it(\"does nothing to invalid JS\", () => {\n    ensureUnchanged(\"function blah {}\");\n    ensureUnchanged(\"function() {}\");\n    ensureUnchanged(\"#W$OTN#$ROGK$#%OKRr<T$R>\");\n  });\n\n  it(\"does nothing to code w/ setup() func decl\", () => {\n    ensureUnchanged(\"function setup() {}\");\n  });\n\n  it(\"does nothing to code w/ setup var decl\", () => {\n    ensureUnchanged(\"var setup = function() {}\");\n    ensureUnchanged(\"let setup = function() {}\");\n  });\n\n  it(\"does nothing to code w/ draw() func decl\", () => {\n    ensureUnchanged(\"function draw() {}\");\n  });\n\n  it(\"does nothing to code w/ draw var decl\", () => {\n    ensureUnchanged(\"var draw = function() {}\");\n    ensureUnchanged(\"let draw = function() {}\");\n  });\n\n  it(\"wraps code that lacks setup/draw in setup()\", () => {\n    expect(makeImplicitSketch(\"foo()\"))\n      .to.eql(\"function setup() { foo() }\");\n\n    expect(makeImplicitSketch(\"function boop() {}\"))\n      .to.eql(\"function setup() { function boop() {} }\");\n  });\n});\n","/// <reference path=\"../typings/mocha.d.ts\" />\n\nimport chai = require(\"chai\"); let expect = chai.expect;\n\nimport LoopInserter from \"../lib/loop-inserter\";\nimport falafel from \"../lib/falafel\";\n\n// These tests are ported from https://github.com/toolness/slowmo-js.\n\nfunction testLoop(code) {\n  let i = 0;\n  let checkCalled = 0;\n  let check = function() {\n    checkCalled++;\n  };\n  let mangled = falafel(code, {}, LoopInserter(\"check\")).toString();\n\n  eval(mangled);\n  expect(checkCalled).to.equal(3);\n  expect(i).to.equal(3);\n}\n\ndescribe('LoopInserter', () => {\n  it('works with for loops', () => {\n    testLoop(\"for (i = 0; i < 3; i++) {}\");\n  });\n\n  it(\"works w/ for loops w/ empty conditions\", () => {\n    testLoop(\"for (i = 0;; i++) { if (i >= 2) { i++; break;} }\");\n  });\n\n  it(\"works with while loops\", () => {\n    testLoop(\"i = 0; while (i < 3) { i++; }\");\n  });\n\n  it(\"works with do..while loops\", () => {\n    testLoop(\"i = 0; do { i++; } while (i < 3)\");\n  });\n\n  it(\"can take a function w/ node as arg\", () => {\n    let log = [];\n    let logLoop = function(range) {\n      log.push(range);\n    };\n    let code = \"/* */ for (var i = 0; i < 1; i++) {}\";\n    let mangled = falafel(code, {}, LoopInserter(function(node) {\n      return \"logLoop(\" + JSON.stringify(node.range) + \");\";\n    })).toString();\n\n    eval(mangled);\n    expect(log).to.eql([[6, 36]]);\n  });\n});\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/// <reference path=\"../typings/mocha.d.ts\" />\n\nmocha.setup('bdd' as MochaSetupOptions);\n\nimport \"./test-loop-inserter\";\nimport \"./test-implicit-sketch\";\n\nwindow.addEventListener('load', () => {\n  mocha.run();\n});\n"],"names":["exclude","excludes","slice","call","arguments","excludeProps","res","obj","Object","keys","forEach","key","indexOf","args","i","length","AssertionError","message","_props","ssf","props","extend","this","showDiff","Error","captureStackTrace","e","stack","module","exports","prototype","create","name","constructor","toJSON","used","version","util","use","fn","push","config","assertion","core","expect","should","assert","_chai","flag","Assertion","msg","ssfi","lockSsfi","proxify","defineProperty","get","console","warn","includeStack","set","value","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","test","undefined","getMessage","actual","getActual","assertionErrorObjectProperties","operator","getOperator","val","truncateThreshold","useProxy","proxyExcludedKeys","chai","_","an","type","toLowerCase","article","charAt","SameValueZero","a","b","isNaN","includeChainingBehavior","include","objType","flagMsg","negate","isDeep","descriptor","included","has","isEql","eql","item","some","firstErr","numErrs","prop","propAssertion","transferFlags","property","err","checkError","compatibleConstructor","inspect","assertExist","checkArguments","assertEqual","prevLockSsfi","_obj","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","size","assertLeast","assertBelow","assertMost","assertInstanceOf","target","isInstanceOf","TypeError","getName","assertProperty","isNested","isOwn","nameType","hasProperty","pathInfo","getPathInfo","hasOwnProperty","exists","assertOwnProperty","apply","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","assertKeys","str","keysType","deepStr","mixedArgsMsg","Array","getOwnEnumerableProperties","map","String","len","any","all","expectedKey","actualKey","every","last","pop","join","sort","compareByInspect","assertThrows","errorLike","errMsgMatcher","caughtErr","is","RegExp","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","getConstructorName","toString","compatibleInstance","placeholder","compatibleMessage","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","closeTo","delta","Math","abs","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","trim","start","finish","startType","finishType","range","toUTCString","subset","be","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","splice","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isExtensible","isSealed","isFrozen","isFinite","express","errmsg","fail","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","exist","notExists","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isArray","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","match","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","val2","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","loadShould","enumerable","configurable","writable","shouldGetter","Number","Symbol","BigInt","valueOf","val1","errt","errs","Throw","Should","addLengthGuard","canSetPrototype","setPrototypeOf","testFn","excludeNames","getOwnPropertyNames","filter","propDesc","Function","ctx","chainableBehavior","__methods","chainableMethodWrapper","newAssertion","asserterName","pd","fnLengthDesc","assertionName","isChainable","methodWrapper","isProxyEnabled","getter","propertyGetter","types","t","index","art","flags","__flags","object","replace","objectType","isObjectType","getOwnEnumerablePropertySymbols","concat","getOwnPropertySymbols","sym","proto","getPrototypeOf","pathval","expectTypes","getProperties","getEnumerableProperties","formatValue","recurseTimes","ret","primitive","stylize","simple","JSON","stringify","formatPrimitive","HTMLElement","nodeType","nodeName","outerHTML","document","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","innerHTML","nameSuffix","visibleKeys","showHidden","isError","isRegExp","isDate","Date","formatError","ar","output","base","array","typedArray","braces","objectToString","seen","l","formatProperty","formatArray","formatTypedArray","reduce","prev","cur","reduceToSingleString","propDescriptor","split","line","substr","d","o","depth","colors","Proxy","Reflect","_chainingBehavior","_method","_super","overwritingMethodWrapper","origLockSsfi","_get","overwritingPropertyGetter","builtins","nonChainableMethodName","proxyGetter","suggestion","suggestionDistance","dist","strA","strB","cap","memo","fill","j","ch","charCodeAt","min","stringDistanceCapped","includeAll","functionNameMatch","getFunctionName","constructorFn","thrown","errMatcher","comparisonString","constructorName","FakeMap","_key","random","now","MemoizeMap","WeakMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","iterableEqual","regexpEqual","getGeneratorEntries","generatorEqual","Uint8Array","buffer","leftHandItems","rightHandItems","entriesEqual","leftHandKeys","getEnumerableKeys","rightHandKeys","keysEqual","leftHandEntries","getIteratorEntries","rightHandEntries","objectEqual","extensiveDeepEqualByType","iterator","hasIteratorFunction","iteratorError","generator","generatorResult","next","accumulator","done","root","factory","Token","TokenName","FnExprTokens","Syntax","PlaceHolders","Messages","Regex","source","strict","lineNumber","lineStart","hasLineTerminator","lastIndex","lastLineNumber","lastLineStart","startIndex","startLineNumber","startLineStart","scanning","lookahead","state","extra","isBindingElement","isAssignmentTarget","firstCoverInitializedNameError","condition","isDecimalDigit","isHexDigit","isOctalDigit","octalToDecimal","octal","code","isWhiteSpace","isLineTerminator","fromCodePoint","cp","fromCharCode","isIdentifierStart","NonAsciiIdentifierStart","isIdentifierPart","NonAsciiIdentifierPart","isStrictModeReservedWord","id","isRestrictedWord","isKeyword","addComment","end","loc","comment","lastCommentStart","comments","attachComment","leadingComments","trailingComments","tokenize","delegate","tokens","skipSingleLineComment","offset","column","skipMultiLineComment","tolerateUnexpectedToken","skipComment","scanHexEscape","prefix","scanUnicodeCodePointEscape","throwUnexpectedToken","codePointAt","second","getComplexIdentifier","getIdentifier","scanIdentifier","Identifier","Keyword","NullLiteral","BooleanLiteral","scanPunctuator","token","Punctuator","openParenToken","tokenValues","openCurlyToken","curlyStack","scanOctalLiteral","number","NumericLiteral","parseInt","scanNumericLiteral","scanHexLiteral","scanBinaryLiteral","isImplicitOctalLiteral","parseFloat","scanRegExp","body","classMarker","terminated","UnterminatedRegExp","literal","scanRegExpBody","restore","scanRegExpFlags","pattern","tmp","$0","$1","$2","codePoint","InvalidRegExp","exception","testRegExp","RegularExpression","regex","collectRegex","pos","isIdentifierName","advance","EOF","quote","unescaped","octToDec","StringLiteral","scanStringLiteral","previous","check","testKeyword","advanceSlash","rawOffset","head","tail","cooked","throwError","TemplateOctalLiteral","Template","raw","scanTemplate","collectToken","entry","lex","peek","Position","SourceLocation","WrappingSourceLocation","startToken","Node","WrappingNode","recordError","error","existing","errors","createError","description","constructError","messageFormat","whole","tolerateError","unexpectedTokenError","UnexpectedToken","UnexpectedEOS","UnexpectedIdentifier","UnexpectedNumber","UnexpectedString","UnexpectedTemplate","isFutureReservedWord","UnexpectedReserved","StrictReservedWord","expectCommaSeparator","expectKeyword","keyword","matchKeyword","matchContextualKeyword","consumeSemicolon","isolateCoverGrammar","parser","oldIsBindingElement","oldIsAssignmentTarget","oldFirstCoverInitializedNameError","inheritCoverGrammar","parsePropertyPattern","params","kind","keyToken","init","node","computed","parseVariableIdentifier","parseAssignmentExpression","finishProperty","finishAssignmentPattern","parseObjectPropertyKey","parsePatternWithDefault","parsePattern","rest","restNode","elements","finishRestElement","finishArrayPattern","parseArrayPattern","properties","finishObjectPattern","parseObjectPattern","previousAllowYield","right","allowYield","parseArrayInitializer","restSpread","finishSpreadElement","finishArrayExpression","parsePropertyFunction","paramInfo","isGenerator","previousStrict","parseFunctionSourceElements","firstRestricted","stricted","finishFunctionExpression","defaults","StrictOctalLiteral","finishLiteral","finishIdentifier","lookaheadPropertyName","tryParseMethodDefinition","methodNode","defaultCount","paramSet","parseParam","parseParams","parsePropertyMethodFunction","parseObjectProperty","hasProto","maybeMethod","Literal","DuplicateProtoProperty","parseObjectInitializer","finishObjectExpression","reinterpretExpressionAsPattern","MemberExpression","RestElement","AssignmentPattern","SpreadElement","argument","ArrayExpression","ArrayPattern","ObjectExpression","ObjectPattern","AssignmentExpression","left","parseTemplateElement","option","finishTemplateElement","parseTemplateLiteral","quasi","quasis","expressions","parseExpression","finishTemplateLiteral","parseGroupExpression","ArrowParameterPlaceHolder","rawParams","parseRestElement","finishSequenceExpression","SequenceExpression","parsePrimaryExpression","classBody","superClass","classNode","sourceType","parseNonComputedProperty","StrictFunctionName","parseFunctionExpression","finishThisExpression","parseLeftHandSideExpressionAllowCall","parseClassBody","finishClassExpression","parseArguments","parseNonComputedMember","parseComputedMember","parseNewExpression","callee","inFunctionBody","finishMetaProperty","parseLeftHandSideExpression","finishNewExpression","previousAllowIn","allowIn","finishSuper","finishMemberExpression","finishCallExpression","finishTaggedTemplateExpression","parsePostfixExpression","StrictLHSPostfix","InvalidLHSInAssignment","finishPostfixExpression","parseUnaryExpression","StrictLHSPrefix","finishUnaryExpression","StrictDelete","binaryPrecedence","prec","parseBinaryExpression","marker","markers","finishBinaryExpression","checkPatternParam","param","validateParam","YieldExpression","parseArrowFunctionExpression","finishArrowFunctionExpression","BlockStatement","op","finishYieldExpression","parseYieldExpression","consequent","alternate","finishConditionalExpression","parseConditionalExpression","StrictParamDupe","reinterpretAsCoverFormalsList","StrictLHSAssignment","finishAssignmentExpression","parseStatementListItem","IllegalExportDeclaration","declaration","parseFunctionDeclaration","finishExportDefaultDeclaration","parseClassDeclaration","parseExportDefaultDeclaration","src","MissingFromClause","parseModuleSpecifier","finishExportAllDeclaration","parseExportAllDeclaration","isExportFromIdentifier","specifiers","parseLexicalDeclaration","inFor","finishExportNamedDeclaration","parseExportSpecifier","parseExportNamedDeclaration","IllegalImportDeclaration","parseNamedImports","parseImportNamespaceSpecifier","local","finishImportDefaultSpecifier","parseImportDefaultSpecifier","finishImportDeclaration","parseImportDeclaration","lexical","ts","tokenCount","resetTokenizerState","parseStatement","parseBlock","block","parseStatementList","finishBlockStatement","parseVariableDeclaration","StrictVarName","finishVariableDeclarator","parseVariableDeclarationList","opt","parseLexicalBinding","parseBindingList","declarations","finishLexicalDeclaration","ObjectPatternAsRestParameter","DefaultRestParameter","ParameterAfterRestParameter","parseSwitchCase","statement","finishSwitchCase","parseTryStatement","handler","finalizer","paramMap","DuplicateBinding","StrictCatchVariable","finishCatchClause","parseCatchClause","NoCatchOrFinally","finishTryStatement","labeledBody","finishEmptyStatement","parseEmptyStatement","finishExpressionStatement","parseExpressionStatement","label","inIteration","inSwitch","IllegalBreak","finishBreakStatement","labelSet","UnknownLabel","parseBreakStatement","IllegalContinue","finishContinueStatement","parseContinueStatement","finishDebuggerStatement","parseDebuggerStatement","oldInIteration","finishDoWhileStatement","parseDoWhileStatement","forIn","initSeq","initStartToken","update","finishVariableDeclaration","InvalidLHSInForIn","InvalidLHSInForLoop","finishForStatement","finishForInStatement","finishForOfStatement","parseForStatement","finishIfStatement","parseIfStatement","IllegalReturn","finishReturnStatement","parseReturnStatement","discriminant","cases","clause","oldInSwitch","defaultFound","finishSwitchStatement","MultipleDefaultsInSwitch","parseSwitchStatement","NewlineAfterThrow","finishThrowStatement","parseThrowStatement","parseVariableStatement","finishWhileStatement","parseWhileStatement","StrictModeWith","finishWithStatement","parseWithStatement","Redeclaration","finishLabeledStatement","oldLabelSet","oldInFunctionBody","StrictParamName","def","identifierIsOptional","finishFunctionDeclaration","isStatic","hasConstructor","StaticPrototype","ConstructorSpecialMethod","DuplicateConstructor","MethodDefinition","shorthand","finishClassBody","finishClassDeclaration","InvalidModuleSpecifier","exported","finishExportSpecifier","imported","finishImportSpecifier","NoAsAfterImportNamespace","finishImportNamespaceSpecifier","parseProgram","parseScriptBody","finishProgram","ArrowFunctionExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForOfStatement","ForInStatement","FunctionDeclaration","FunctionExpression","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","LabeledStatement","LogicalExpression","MetaProperty","NewExpression","Program","Property","ReturnStatement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","processComment","lastChild","innerComments","bottomRight","bottomRightStack","unshift","each","accessor","meta","tag","guardedHandlers","handlers","tolerant","lexError","parse","program","filterTokenLocation","freeze","aFunc","parsePath","path","mArr","p","internalGetPathValue","parsed","pathDepth","temporaryValue","part","info","parent","getPathValue","setPathValue","tempObj","propName","propVal","internalSetPathValue","insertHelpers","chunks","s","opts","ast","walk","child","c","esprima","funcDecl","varDecl","ensureUnchanged","describe","it","testLoop","checkCalled","mangled","eval","log","logLoop","promiseExists","Promise","globalObject","self","g","symbolExists","mapExists","Map","setExists","Set","weakMapExists","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","symbolToStringTagExists","toStringTag","setEntriesExists","entries","mapEntriesExists","setIteratorPrototype","mapIteratorPrototype","arrayIteratorExists","arrayIteratorPrototype","stringIteratorExists","stringIteratorPrototype","typeofObj","window","location","navigator","mimeTypes","plugins","tagName","stringTag","objPrototype","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","mocha","setup","addEventListener","run"],"sourceRoot":""}